{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"INDONESIA ONE SEARCH Satu pintu pencarian untuk semua koleksi publik dari perpustakaan, museum, arsip, dan sumber elektronik di Indonesia Overview Indonesia OneSearch atau IOS adalah sebuah pintu pencarian tunggal untuk semua koleksi publik dari perpustakaan, museum, dan arsip di seluruh Indonesia. Selain itu, portal ini juga menyediakan akses ke sumber elektronik internasional (e-resources) yang dilanggan oleh Perpusnas RI untuk semua anggota yang terdaftar. Untuk bergabung dengan IOS, setiap repositori harus menyediakan API berbasis OAI-PMH (Open Archive Initiatives), sebuah protokol pengambilan metadata yang sudah digunakan oleh 75% lebih repositori di dunia. Fitur Aplikasi Fitur aplikasi Indonesia One Search (IOS) antara lain sebagai berikut: 1) User Module , berisi pendaftaran, login, dan recovery. 2) Modul Institusi , yang berisi: Menambah dan mengatur institusi Menambah dan mengatur library Menyediakan fasilitas Widget (link informasi suatu library sudah terindeks di OneSearch) 3) Repository Module , berisi fasilitas IOS terdiri dari Mendaftarkan dan Manajemen Repository Monitoring Repository Repository Crawling, Indexing, & Deletion Setting Widget 4) Consortioum Site Module , berisi pencarian collection pada grup konsorsium dalam bentuk dashboard","title":"INDONESIA ONE SEARCH"},{"location":"#indonesia-one-search","text":"Satu pintu pencarian untuk semua koleksi publik dari perpustakaan, museum, arsip, dan sumber elektronik di Indonesia","title":"INDONESIA ONE SEARCH"},{"location":"#overview","text":"Indonesia OneSearch atau IOS adalah sebuah pintu pencarian tunggal untuk semua koleksi publik dari perpustakaan, museum, dan arsip di seluruh Indonesia. Selain itu, portal ini juga menyediakan akses ke sumber elektronik internasional (e-resources) yang dilanggan oleh Perpusnas RI untuk semua anggota yang terdaftar. Untuk bergabung dengan IOS, setiap repositori harus menyediakan API berbasis OAI-PMH (Open Archive Initiatives), sebuah protokol pengambilan metadata yang sudah digunakan oleh 75% lebih repositori di dunia.","title":"Overview"},{"location":"#fitur-aplikasi","text":"Fitur aplikasi Indonesia One Search (IOS) antara lain sebagai berikut: 1) User Module , berisi pendaftaran, login, dan recovery. 2) Modul Institusi , yang berisi: Menambah dan mengatur institusi Menambah dan mengatur library Menyediakan fasilitas Widget (link informasi suatu library sudah terindeks di OneSearch) 3) Repository Module , berisi fasilitas IOS terdiri dari Mendaftarkan dan Manajemen Repository Monitoring Repository Repository Crawling, Indexing, & Deletion Setting Widget 4) Consortioum Site Module , berisi pencarian collection pada grup konsorsium dalam bentuk dashboard","title":"Fitur Aplikasi"},{"location":"about/contributing/","text":"Contributing to MkDocs An introduction to contributing to the MkDocs project. The MkDocs project welcomes, and depends, on contributions from developers and users in the open source community. Contributions can be made in a number of ways, a few examples are: Code patches via pull requests Documentation improvements Bug reports and patch reviews Code of Conduct Everyone interacting in the MkDocs project's codebases, issue trackers, chat rooms, and mailing lists is expected to follow the PyPA Code of Conduct . Reporting an Issue Please include as much detail as you can. Let us know your platform and MkDocs version. If the problem is visual (for example a theme or design issue) please add a screenshot and if you get an error please include the full error and traceback. Testing the Development Version If you want to just install and try out the latest development version of MkDocs you can do so with the following command. This can be useful if you want to provide feedback for a new feature or want to confirm if a bug you have encountered is fixed in the git master. It is strongly recommended that you do this within a virtualenv . pip install https://github.com/mkdocs/mkdocs/archive/master.tar.gz Installing for Development First you'll need to fork and clone the repository. Once you have a local copy, run the following command. It is strongly recommended that you do this within a virtualenv . pip install --editable . This will install MkDocs in development mode which binds the mkdocs command to the git repository. Running the tests To run the tests, it is recommended that you use Tox . This just needs to be pip installed and then the test suite can be ran for MkDocs but running the command tox in the root of your MkDocs repository. It will attempt to run the tests against all of the Python versions we support. So don't be concerned if you are missing some and they fail. The rest will be verified by Travis when you submit a pull request. Submitting Pull Requests Once you are happy with your changes or you are ready for some feedback, push it to your fork and send a pull request. For a change to be accepted it will most likely need to have tests and documentation if it is a new feature.","title":"Contributing to MkDocs"},{"location":"about/contributing/#contributing-to-mkdocs","text":"An introduction to contributing to the MkDocs project. The MkDocs project welcomes, and depends, on contributions from developers and users in the open source community. Contributions can be made in a number of ways, a few examples are: Code patches via pull requests Documentation improvements Bug reports and patch reviews","title":"Contributing to MkDocs"},{"location":"about/contributing/#code-of-conduct","text":"Everyone interacting in the MkDocs project's codebases, issue trackers, chat rooms, and mailing lists is expected to follow the PyPA Code of Conduct .","title":"Code of Conduct"},{"location":"about/contributing/#reporting-an-issue","text":"Please include as much detail as you can. Let us know your platform and MkDocs version. If the problem is visual (for example a theme or design issue) please add a screenshot and if you get an error please include the full error and traceback.","title":"Reporting an Issue"},{"location":"about/contributing/#testing-the-development-version","text":"If you want to just install and try out the latest development version of MkDocs you can do so with the following command. This can be useful if you want to provide feedback for a new feature or want to confirm if a bug you have encountered is fixed in the git master. It is strongly recommended that you do this within a virtualenv . pip install https://github.com/mkdocs/mkdocs/archive/master.tar.gz","title":"Testing the Development Version"},{"location":"about/contributing/#installing-for-development","text":"First you'll need to fork and clone the repository. Once you have a local copy, run the following command. It is strongly recommended that you do this within a virtualenv . pip install --editable . This will install MkDocs in development mode which binds the mkdocs command to the git repository.","title":"Installing for Development"},{"location":"about/contributing/#running-the-tests","text":"To run the tests, it is recommended that you use Tox . This just needs to be pip installed and then the test suite can be ran for MkDocs but running the command tox in the root of your MkDocs repository. It will attempt to run the tests against all of the Python versions we support. So don't be concerned if you are missing some and they fail. The rest will be verified by Travis when you submit a pull request.","title":"Running the tests"},{"location":"about/contributing/#submitting-pull-requests","text":"Once you are happy with your changes or you are ready for some feedback, push it to your fork and send a pull request. For a change to be accepted it will most likely need to have tests and documentation if it is a new feature.","title":"Submitting Pull Requests"},{"location":"about/license/","text":"License The legal stuff. Included projects Themes used under license from the ReadTheDocs projects. ReadTheDocs theme - View license . Many thanks to the authors and contributors of those wonderful projects. MkDocs License (BSD) Copyright \u00a9 2014, Tom Christie. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"about/license/#license","text":"The legal stuff.","title":"License"},{"location":"about/license/#included-projects","text":"Themes used under license from the ReadTheDocs projects. ReadTheDocs theme - View license . Many thanks to the authors and contributors of those wonderful projects.","title":"Included projects"},{"location":"about/license/#mkdocs-license-bsd","text":"Copyright \u00a9 2014, Tom Christie. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"MkDocs License (BSD)"},{"location":"about/release-notes/","text":"Release Notes Upgrading To upgrade MkDocs to the latest version, use pip: pip install -U mkdocs You can determine your currently installed version using mkdocs --version : $ mkdocs --version mkdocs, version 1.0 from /path/to/mkdocs (Python 3.6) Maintenance team The current and past members of the MkDocs team. @tomchristie @d0ugal @waylan Version 1.0.1 (2018-08-13) Bugfix: Prevent page reload when [Enter] is pressed in search box (#1589). Bugfix: Avoid calling search until all assets are ready (#1584). Bugfix: Exclude README.md if index.md is present (#1580). Bugfix: Fix readthedocs theme navigation bug with homepage (#1576). Version 1.0 (2018-08-03) Major Additions to Version 1.0 Internal Refactor of Pages, Files, and Navigation Internal handling of pages, files and navigation has been completely refactored. The changes included in the refactor are summarized below. Support for hidden pages. All Markdown pages are now included in the build regardless of whether they are included in the navigation configuration (#699). The navigation can now include links to external sites (#989 #1373 & #1406). Page data (including titles) is properly determined for all pages before any page is rendered (#1347). Automatically populated navigation now sorts index pages to the top. In other words, The index page will be listed as the first child of a directory, while all other documents are sorted alphanumerically by file name after the index page (#73 & #1042). A README.md file is now treated as an index file within a directory and will be rendered to index.html (#608). The URLs for all files are computed once and stored in a files collection. This ensures all internal links are always computed correctly regardless of the configuration. This also allows all internal links to be validated, not just links to other Markdown pages. (#842 & #872). A new url template filter smartly ensures all URLs are relative to the current page (#1526). An on_files plugin event has been added, which could be used to include files not in the docs_dir , exclude files, redefine page URLs (i.e. implement extensionless URLs), or to manipulate files in various other ways. Backward Incompatible Changes As part of the internal refactor, a number of backward incompatible changes have been introduced, which are summarized below. URLS have changed when use_directory_urls is False Previously, all Markdown pages would be have their filenames altered to be index pages regardless of how the use_directory_urls setting was configured. However, the path munging is only needed when use_directory_urls is set to True (the default). The path mungling no longer happens when use_directory_urls is set to False , which will result in different URLs for all pages that were not already index files. As this behavior only effects a non-default configuration, and the most common user-case for setting the option to False is for local file system ( file:// ) browsing, its not likely to effect most users. However, if you have use_directory_urls set to False for a MkDocs site hosted on a web server, most of your URLs will now be broken. As you can see below, the new URLs are much more sensible. Markdown file Old URL New URL index.md index.html index.html foo.md foo/index.html foo.html foo/bar.md foo/bar/index.html foo/bar.html Note that there has been no change to URLs or file paths when use_directory_urls is set to True (the default), except that MkDocs more consistently includes an ending slash on all internally generated URLs. The pages configuration setting has been renamed to nav The pages configuration setting is deprecated and will issue a warning if set in the configuration file. The setting has been renamed nav . To update your configuration, simply rename the setting to nav . In other words, if your configuration looked like this: pages: - Home: index.md - User Guide: user-guide.md Simply edit the configuration as follows: nav: - Home: index.md - User Guide: user-guide.md In the current release, any configuration which includes a pages setting, but no nav setting, the pages configuration will be copied to nav and a warning will be issued. However, in a future release, that may no longer happen. If both pages and nav are defined, the pages setting will be ignored. Template variables and base_url In previous versions of MkDocs some URLs expected the base_url template variable to be prepended to the URL and others did not. That inconsistency has been removed in that no URLs are modified before being added to the template context. For example, a theme template might have previously included a link to the site_name as: <a href=\"{{ nav.homepage.url }}\">{{ config.site_name }}</a> And MkDocs would magically return a URL for the homepage which was relative to the current page. That \"magic\" has been removed and the url template filter should be used: <a href=\"{{ nav.homepage.url|url }}\">{{ config.site_name }}</a> This change applies to any navigation items and pages, as well as the page.next_page and page.previous_page attributes. For the time being, the extra_javascript and extra_css variables continue to work as previously (without the url template filter), but they have been deprecated and the corresponding configuration values ( config.extra_javascript and config.extra_css respectively) should be used with the filter instead. {% for path in config['extra_css'] %} <link href=\"{{ path|url }}\" rel=\"stylesheet\"> {% endfor %} Note that navigation can now include links to external sites. Obviously, the base_url should not be prepended to these items. However, the url template filter is smart enough to recognize the URL is absolute and does not alter it. Therefore, all navigation items can be passed to the filter and only those that need to will be altered. {% for nav_item in nav %} <a href=\"{{ nav_item.url|url }}\">{{ nav_item.title }}</a> {% endfor %} Path Based Settings are Relative to Configuration File (#543) Previously any relative paths in the various configuration options were resolved relative to the current working directory. They are now resolved relative to the configuration file. As the documentation has always encouraged running the various MkDocs commands from the directory that contains the configuration file (project root), this change will not affect most users. However, it will make it much easier to implement automated builds or otherwise run commands from a location other than the project root. Simply use the -f/--config-file option and point it at the configuration file: mkdocs build --config-file /path/to/my/config/file.yml As previously, if no file is specified, MkDocs looks for a file named mkdocs.yml in the current working directory. Added support for YAML Meta-Data (#1542) Previously, MkDocs only supported MultiMarkdown style meta-data, which does not recognize different data types and is rather limited. MkDocs now also supports YAML style meta-data in Markdown documents. MkDocs relies on the the presence or absence of the deliminators ( --- or ... ) to determine whether YAML style meta-data or MultiMarkdown style meta-data is being used. Previously MkDocs would recognize MultiMarkdown style meta-data between the deliminators. Now, if the deliminators are detected, but the content between the deliminators is not valid YAML meta-data, MkDocs does not attempt to parse the content as MultiMarkdown style meta-data. Therefore, MultiMarkdowns style meta-data must not include the deliminators. See the MultiMarkdown style meta-data documentation for details. Prior to version 0.17, MkDocs returned all meta-data values as a list of strings (even a single line would return a list of one string). In version 0.17, that behavior was changed to return each value as a single string (multiple lines were joined), which some users found limiting (see #1471). That behavior continues for MultiMarkdown style meta-data in the current version. However, YAML style meta-data supports the full range of \"safe\" YAML data types. Therefore, it is recommended that any complex meta-data make use of the YAML style (see the YAML style meta-data documentation for details). In fact, a future version of MkDocs may deprecate support for MultiMarkdown style meta-data. Refactor Search Plugin The search plugin has been completely refactored to include support for the following features: Use a web worker in the browser with a fallback (#1396). Optionally pre-build search index locally (#859 & #1061). Upgrade to lunr.js 2.x (#1319). Support search in languages other than English (#826). Allow the user to define the word separators (#867). Only run searches for queries of length > 2 (#1127). Remove dependency on require.js (#1218). Compress the search index (#1128). Users can review the configuration options available and theme authors should review how search and themes interact. theme_dir Configuration Option fully Deprecated As of version 0.17, the custom_dir option replaced the deprecated theme_dir option. If users had set the theme_dir option, MkDocs version 0.17 copied the value to the theme.custom_dir option and a warning was issued. As of version 1.0, the value is no longer copied and an error is raised. Other Changes and Additions to Version 1.0 Keyboard shortcuts changed to not conflict with commonly used accessibility shortcuts (#1502.) User friendly YAML parse errors (#1543). Officially support Python 3.7. A missing theme configuration file now raises an error. Empty extra_css and extra_javascript settings no longer raise a warning. Add highlight.js configuration settings to built-in themes (#1284). Close search modal when result is selected (#1527). Add a level attribute to AnchorLinks (#1272). Add MkDocs version check to gh-deploy script (#640). Improve Markdown extension error messages. (#782). Drop official support for Python 3.3 and set tornado>=5.0 (#1427). Add support for GitLab edit links (#1435). Link to GitHub issues from release notes (#644). Expand {sha} and {version} in gh-deploy commit message (#1410). Compress sitemap.xml (#1130). Defer loading JS scripts (#1380). Add a title attribute to the search input (#1379). Update RespondJS to latest version (#1398). Always load Google Analytics over HTTPS (#1397). Improve scrolling frame rate (#1394). Provide more version info. (#1393). Refactor writing-your-docs.md (#1392). Workaround Safari bug when zooming to < 100% (#1389). Remove addition of clicky class to body and animations. (#1387). Prevent search plugin from reinjecting extra_javascript files (#1388). Refactor copy_media_files util function for more flexibility (#1370). Remove PyPI Deployment Docs (#1360). Update links to Python-Markdown library (#1360). Document how to generate manpages for MkDocs commands (#686). Version 0.17.5 (2018-07-06) Bugfix: Fix Python 3.7 and PEP 479 incompatibility (#1518). Version 0.17.4 (2018-06-08) Bugfix: Add multi-level nesting support to sitemap.xml (#1482). Version 0.17.3 (2018-03-07) Bugfix: Set dependency tornado>=4.1,<5.0 due to changes in 5.0 (#1428). Version 0.17.2 (2017-11-15) Bugfix: Correct extra_* config setting regressions (#1335 & #1336). Version 0.17.1 (2017-10-30) Bugfix: Support repo_url with missing ending slash. (#1321). Bugfix: Add length support to mkdocs.toc.TableOfContext (#1325). Bugfix: Add some theme specific settings to the search plugin for third party themes (#1316). Bugfix: Override site_url with dev_addr on local server (#1317). Version 0.17.0 (2017-10-19) Major Additions to Version 0.17.0 Plugin API. (#206) A new Plugin API has been added to MkDocs which allows users to define their own custom behaviors. See the included documentation for a full explanation of the API. The previously built-in search functionality has been removed and wrapped in a plugin (named \"search\") with no changes in behavior. When MkDocs builds, the search index is now written to search/search_index.json instead of mkdocs/search_index.json . If no plugins setting is defined in the config, then the search plugin will be included by default. See the configuration documentation for information on overriding the default. Theme Customization. (#1164) Support had been added to provide theme specific customizations. Theme authors can define default options as documented in Theme Configuration . A theme can now inherit from another theme, define various static templates to be rendered, and define arbitrary default variables to control behavior in the templates. The theme configuration is defined in a configuration file named mkdocs_theme.yml which should be placed at the root of your template files. A warning will be raised if no configuration file is found and an error will be raised in a future release. Users can override those defaults under the theme configuration option of their mkdocs.yml configuration file, which now accepts nested options. One such nested option is the custom_dir option, which replaces the now deprecated theme_dir option. If users had previously set the theme_dir option, a warning will be issued, with an error expected in a future release. If a configuration previously defined a theme_dir like this: theme: mkdocs theme_dir: custom Then the configuration should be adjusted as follows: theme: name: mkdocs custom_dir: custom See the theme configuration option documentation for details. Previously deprecated Template variables removed. (#1168) Page Template The primary entry point for page templates has been changed from base.html to main.html . This allows base.html to continue to exist while allowing users to override main.html and extend base.html . For version 0.16, base.html continued to work if no main.html template existed, but it raised a deprecation warning. In version 1.0, a build will fail if no main.html template exists. Context Variables Page specific variable names in the template context have been refactored as defined in Custom Themes . The old variable names issued a warning in version 0.16, but have been removed in version 1.0. Any of the following old page variables should be updated to the new ones in user created and third-party templates: Old Variable Name New Variable Name current_page page page_title page.title content page.content toc page.toc meta page.meta canonical_url page.canonical_url previous_page page.previous_page next_page page.next_page Additionally, a number of global variables have been altered and/or removed and user created and third-party templates should be updated as outlined below: Old Variable Name New Variable Name or Expression current_page page include_nav nav|length>1 include_next_prev (page.next_page or page.previous_page) site_name config.site_name site_author config.site_author page_description config.site_description repo_url config.repo_url repo_name config.repo_name site_url config.site_url copyright config.copyright google_analytics config.google_analytics homepage_url nav.homepage.url favicon {{ base_url }}/img/favicon.ico Auto-Populated extra_css and extra_javascript Fully Deprecated. (#986) In previous versions of MkDocs, if the extra_css or extra_javascript config settings were empty, MkDocs would scan the docs_dir and auto-populate each setting with all of the CSS and JavaScript files found. On version 0.16 this behavior was deprecated and a warning was issued. In 0.17 any unlisted CSS and JavaScript files will not be included in the HTML templates, however, a warning will be issued. In other words, they will still be copied to the site-dir , but they will not have any effect on the theme if they are not explicitly listed. All CSS and javaScript files in the docs_dir should be explicitly listed in the extra_css or extra_javascript config settings going forward. Other Changes and Additions to Version 0.17.0 Add \"edit Link\" support to MkDocs theme (#1129) Open files with utf-8-sig to account for BOM (#1186) Symbolic links are now followed consistently (#1134) Support for keyboard navigation shortcuts added to included themes (#1095) Some refactoring and improvements to config_options (#1296) Officially added support for Python 3.6 (#1296) 404 Error page added to readthedocs theme (#1296)) Internal refactor of Markdown processing (#713) Removed special error message for mkdocs-bootstrap and mkdocs-bootswatch themes (#1168) The legacy pages config is no longer supported (#1168) The deprecated json command has been removed (#481) Support for Python 2.6 has been dropped (#165) File permissions are no longer copied during build (#1292) Support query and fragment strings in edit_uri (#1224 & #1273) Version 0.16.3 (2017-04-04) Fix error raised by autoscrolling in the readthedocs theme (#1177) Fix a few documentation typos (#1181 & #1185) Fix a regression to livereload server introduced in 0.16.2 (#1174) Version 0.16.2 (2017-03-13) System root ( / ) is not a valid path for site_dir or docs_dir (#1161) Refactor readthedocs theme navigation (#1155 & #1156) Add support to dev server to serve custom error pages (#1040) Ensure nav.homepage.url is not blank on error pages (#1131) Increase livereload dependency to 2.5.1 (#1106) Version 0.16.1 (2016-12-22) Ensure scrollspy behavior does not affect nav bar (#1094) Only \"load\" a theme when it is explicitly requested by the user (#1105) Version 0.16 (2016-11-04) Major Additions to Version 0.16.0 Template variables refactored. (#874) Page Context Page specific variable names in the template context have been refactored as defined in Custom Themes . The old variable names will issue a warning but continue to work for version 0.16, but may be removed in a future version. Any of the following old page variables should be updated to the new ones in user created and third-party templates: Old Variable Name New Variable Name current_page page page_title page.title content page.content toc page.toc meta page.meta canonical_url page.canonical_url previous_page page.previous_page next_page page.next_page Global Context Additionally, a number of global variables have been altered and/or deprecated and user created and third-party templates should be updated as outlined below: Previously, the global variable include_nav was altered programmatically based on the number of pages in the nav. The variable will issue a warning but continue to work for version 0.16, but may be removed in a future version. Use {% if nav|length>1 %} instead. Previously, the global variable include_next_prev was altered programmatically based on the number of pages in the nav. The variable will issue a warning but continue to work for version 0.16, but may be removed in a future version. Use {% if page.next_page or page.previous_page %} instead. Previously the global variable page_description was altered programmatically based on whether the current page was the homepage. Now it simply maps to config['site_description'] . Use {% if page.is_homepage %} in the template to conditionally change the description. The global variable homepage_url maps directly to nav.homepage.url and is being deprecated. The variable will issue a warning but continue to work for version 0.16, but may be removed in a future version. Use nav.homepage.url instead. The global variable favicon maps to the configuration setting site_favicon . Both the template variable and the configuration setting are being deprecated and will issue a warning but continue to work for version 0.16, and may be removed in a future version. Use {{ base_url }}/img/favicon.ico in your template instead. Users can simply save a copy of their custom favicon icon to img/favicon.ico in either their docs_dir or theme_dir . A number of variables map directly to similarly named variables in the config . Those variables are being deprecated and will issue a warning but continue to work for version 0.16, but may be removed in a future version. Use config.var_name instead, where var_name is the name of one of the configuration variables. Below is a summary of all of the changes made to the global context: Old Variable Name New Variable Name or Expression current_page page include_nav nav|length>1 include_next_prev (page.next_page or page.previous_page) site_name config.site_name site_author config.site_author page_description config.site_description repo_url config.repo_url repo_name config.repo_name site_url config.site_url copyright config.copyright google_analytics config.google_analytics homepage_url nav.homepage.url favicon {{ base_url }}/img/favicon.ico Increased Template Customization. (#607) The built-in themes have been updated by having each of their many parts wrapped in template blocks which allow each individual block to be easily overridden using the theme_dir config setting. Without any new settings, you can use a different analytics service, replace the default search function, or alter the behavior of the navigation, among other things. See the relevant documentation for more details. To enable this feature, the primary entry point for page templates has been changed from base.html to main.html . This allows base.html to continue to exist while allowing users to override main.html and extend base.html . For version 0.16, base.html will continue to work if no main.html template exists, but it is deprecated and will raise a warning. In version 1.0, a build will fail if no main.html template exists. Any custom and third party templates should be updated accordingly. The easiest way for a third party theme to be updated would be to simply add a main.html file which only contains the following line: {% extends \"base.html\" %} That way, the theme contains the main.html entry point, and also supports overriding blocks in the same manner as the built-in themes. Third party themes are encouraged to wrap the various pieces of their templates in blocks in order to support such customization. Auto-Populated extra_css and extra_javascript Deprecated. (#986) In previous versions of MkDocs, if the extra_css or extra_javascript config settings were empty, MkDocs would scan the docs_dir and auto-populate each setting with all of the CSS and JavaScript files found. This behavior is deprecated and a warning will be issued. In the next release, the auto-populate feature will stop working and any unlisted CSS and JavaScript files will not be included in the HTML templates. In other words, they will still be copied to the site-dir , but they will not have any effect on the theme if they are not explicitly listed. All CSS and javaScript files in the docs_dir should be explicitly listed in the extra_css or extra_javascript config settings going forward. Support for dirty builds. (#990) For large sites the build time required to create the pages can become problematic, thus a \"dirty\" build mode was created. This mode simply compares the modified time of the generated HTML and source markdown. If the markdown has changed since the HTML then the page is re-constructed. Otherwise, the page remains as is. This mode may be invoked in both the mkdocs serve and mkdocs build commands: mkdocs serve --dirtyreload mkdocs build --dirty It is important to note that this method for building the pages is for development of content only, since the navigation and other links do not get updated on other pages. Stricter Directory Validation Previously, a warning was issued if the site_dir was a child directory of the docs_dir . This now raises an error. Additionally, an error is now raised if the docs_dir is set to the directory which contains your config file rather than a child directory. You will need to rearrange you directory structure to better conform with the documented layout . Other Changes and Additions to Version 0.16.0 Bugfix: Support gh-deploy command on Windows with Python 3 (#722) Bugfix: Include .woff2 font files in Python package build (#894) Various updates and improvements to Documentation Home Page/Tutorial (#870) Bugfix: Support livereload for config file changes (#735) Bugfix: Non-media template files are no longer copied with media files (#807) Add a flag (-e/--theme-dir) to specify theme directory with the commands mkdocs build and mkdocs serve (#832) Fixed issues with Unicode file names under Windows and Python 2. (#833) Improved the styling of in-line code in the MkDocs theme. (#718) Bugfix: convert variables to JSON when being passed to JavaScript (#850) Updated the ReadTheDocs theme to match the upstream font sizes and colors more closely. (#857) Fixes an issue with permalink markers showing when the mouse was far above them (#843) Bugfix: Handle periods in directory name when automatically creating the pages config. (#728) Update searching to Lunr 0.7, which comes with some performance enhancements for larger documents (#859) Bugfix: Support SOURCE_DATE_EPOCH environment variable for \"reproducible\" builds (#938) Follow links when copying media files (#869). Change \"Edit on...\" links to point directly to the file in the source repository, rather than to the root of the repository (#975), configurable via the new edit_uri setting. Bugfix: Don't override config value for strict mode if not specified on CLI (#738). Add a --force flag to the gh-deploy command to force the push to the repository (#973). Improve alignment for current selected menu item in readthedocs theme (#888). http://user.github.io/repo => https://user.github.io/repo/ (#1029). Improve installation instructions (#1028). Account for wide tables and consistently wrap inline code spans (#834). Bugfix: Use absolute URLs in nav & media links from error templates (#77). Version 0.15.3 (2016-02-18) Improve the error message the given theme can't be found. Fix an issue with relative symlinks (#639) Version 0.15.2 (2016-02-08) Fix an incorrect warning that states external themes will be removed from MkDocs . Version 0.15.1 (2016-01-30) Lower the minimum supported Click version to 3.3 for package maintainers. (#763) Version 0.15.0 (2016-01-21) Major Additions to Version 0.15.0 Add support for installable themes MkDocs now supports themes that are distributed via Python packages. With this addition, the Bootstrap and Bootswatch themes have been moved to external git repositories and python packages. See their individual documentation for more details about these specific themes. MkDocs Bootstrap MkDocs Bootswatch They will be included with MkDocs by default until a future release. After that they will be installable with pip: pip install mkdocs-bootstrap and pip install mkdocs-bootswatch See the documentation for Styling your docs for more information about using and customizing themes and Custom themes for creating and distributing new themes Other Changes and Additions to Version 0.15.0 Fix issues when using absolute links to Markdown files. (#628) Deprecate support of Python 2.6, pending removal in 1.0.0. (#165) Add official support for Python version 3.5. Add support for site_description and site_author to the ReadTheDocs theme. (#631) Update FontAwesome to 4.5.0. (#789) Increase IE support with X-UA-Compatible. (#785) Added support for Python's -m flag. (#706) Bugfix: Ensure consistent ordering of auto-populated pages. (#638) Bugfix: Scroll the tables of contents on the MkDocs theme if it is too long for the page. (#204) Bugfix: Add all ancestors to the page attribute ancestors rather than just the initial one. (#693) Bugfix: Include HTML in the build output again. (#691) Bugfix: Provide filename to Read the Docs. (#721 and RTD#1480) Bugfix: Silence Click's unicode_literals warning. (#708) Version 0.14.0 (2015-06-09) Improve Unicode handling by ensuring that all config strings are loaded as Unicode. (#592) Remove dependency on the six library. (#583) Remove dependency on the ghp-import library. (#547) Add --quiet and --verbose options to all sub-commands. (#579) Add short options ( -a ) to most command line options. (#579) Add copyright footer for readthedocs theme. (#568) If the requested port in mkdocs serve is already in use, don't show the user a full stack trace. (#596) Bugfix: Fix a JavaScript encoding problem when searching with spaces. (#586) Bugfix: gh-deploy now works if the mkdocs.yml is not in the git repo root. (#578) Bugfix: Handle (pass-through instead of dropping) HTML entities while parsing TOC. (#612) Bugfix: Default extra_templates to an empty list, don't automatically discover them. (#616) Version 0.13.3 (2015-06-02) Bugfix: Reduce validation error to a warning if the site_dir is within the docs_dir as this shouldn't cause any problems with building but will inconvenience users building multiple times. (#580) Version 0.13.2 (2015-05-30) Bugfix: Ensure all errors and warnings are logged before exiting. (#536) Bugfix: Fix compatibility issues with ReadTheDocs. (#554) Version 0.13.1 (2015-05-27) Bugfix: Fix a problem with minimal configurations which only contain a list of paths in the pages config. (#562) Version 0.13.0 (2015-05-26) Deprecations to Version 0.13.0 Deprecate the JSON command In this release the mkdocs json command has been marked as deprecated and when used a deprecation warning will be shown. It will be removed in a future release of MkDocs, version 1.0 at the latest. The mkdocs json command provided a convenient way for users to output the documentation contents as JSON files but with the additions of search to MkDocs this functionality is duplicated. A new index with all the contents from a MkDocs build is created in the site_dir , so with the default value for the site_dir It can be found in site/mkdocs/search_index.json . This new file is created on every MkDocs build (with mkdocs build ) and no configuration is needed to enable it. Change the pages configuration Provide a new way to define pages, and specifically nested pages , in the mkdocs.yml file and deprecate the existing approach, support will be removed with MkDocs 1.0. Warn users about the removal of builtin themes All themes other than mkdocs and readthedocs will be moved into external packages in a future release of MkDocs. This will enable them to be more easily supported and updates outside MkDocs releases. Major Additions to Version 0.13.0 Search Support for search has now been added to MkDocs. This is based on the JavaScript library lunr.js . It has been added to both the mkdocs and readthedocs themes. See the custom theme documentation on supporting search for adding it to your own themes. New Command Line Interface The command line interface for MkDocs has been re-written with the Python library Click . This means that MkDocs now has an easier to use interface with better help output. This change is partially backwards incompatible as while undocumented it was possible to pass any configuration option to the different commands. Now only a small subset of the configuration options can be passed to the commands. To see in full commands and available arguments use mkdocs --help and mkdocs build --help to have them displayed. Support Extra HTML and XML files Like the extra_javascript and extra_css configuration options, a new option named extra_templates has been added. This will automatically be populated with any .html or .xml files in the project docs directory. Users can place static HTML and XML files and they will be copied over, or they can also use Jinja2 syntax and take advantage of the global variables . By default MkDocs will use this approach to create a sitemap for the documentation. Other Changes and Additions to Version 0.13.0 Add support for Markdown extension configuration options . (#435) MkDocs now ships Python wheels . (#486) Only include the build date and MkDocs version on the homepage. (#490) Generate sitemaps for documentation builds. (#436) Add a clearer way to define nested pages in the configuration. (#482) Add an extra config option for passing arbitrary variables to the template. (#510) Add --no-livereload to mkdocs serve for a simpler development server. (#511) Add copyright display support to all themes (#549) Add support for custom commit messages in a mkdocs gh-deploy (#516) Bugfix: Fix linking to media within the same directory as a markdown file called index.md (#535) Bugfix: Fix errors with Unicode filenames (#542). Version 0.12.2 (2015-04-22) Bugfix: Fix a regression where there would be an error if some child titles were missing but others were provided in the pages config. (#464) Version 0.12.1 (2015-04-14) Bugfix: Fixed a CSS bug in the table of contents on some browsers where the bottom item was not clickable. Version 0.12.0 (2015-04-14) Display the current MkDocs version in the CLI output. (#258) Check for CNAME file when using gh-deploy. (#285) Add the homepage back to the navigation on all themes. (#271) Add a strict more for local link checking. (#279) Add Google analytics support to all themes. (#333) Add build date and MkDocs version to the ReadTheDocs and MkDocs theme outputs. (#382) Standardize highlighting across all themes and add missing languages. (#387) Add a verbose flag. (-v) to show more details about what the build. (#147) Add the option to specify a remote branch when deploying to GitHub. This enables deploying to GitHub pages on personal and repo sites. (#354) Add favicon support to the ReadTheDocs theme HTML. (#422) Automatically refresh the browser when files are edited. (#163) Bugfix: Never re-write URLs in code blocks. (#240) Bugfix: Don't copy ditfiles when copying media from the docs_dir . (#254) Bugfix: Fix the rendering of tables in the ReadTheDocs theme. (#106) Bugfix: Add padding to the bottom of all bootstrap themes. (#255) Bugfix: Fix issues with nested Markdown pages and the automatic pages configuration. (#276) Bugfix: Fix a URL parsing error with GitHub enterprise. (#284) Bugfix: Don't error if the mkdocs.yml is completely empty. (#288) Bugfix: Fix a number of problems with relative URLs and Markdown files. (#292) Bugfix: Don't stop the build if a page can't be found, continue with other pages. (#150) Bugfix: Remove the site_name from the page title, this needs to be added manually. (#299) Bugfix: Fix an issue with table of contents cutting off Markdown. (#294) Bugfix: Fix hostname for BitBucket. (#339) Bugfix: Ensure all links end with a slash. (#344) Bugfix: Fix repo links in the readthedocs theme. (#365) Bugfix: Include jQuery locally to avoid problems using MkDocs offline. (#143) Bugfix: Don't allow the docs_dir to be in the site_dir or vice versa. (#384) Bugfix: Remove inline CSS in the ReadTheDocs theme. (#393) Bugfix: Fix problems with the child titles due to the order the pages config was processed. (#395) Bugfix: Don't error during live reload when the theme doesn't exist. (#373) Bugfix: Fix problems with the Meta extension when it may not exist. (#398) Bugfix: Wrap long inline code otherwise they will run off the screen. (#313) Bugfix: Remove HTML parsing regular expressions and parse with HTMLParser to fix problems with titles containing code. (#367) Bugfix: Fix an issue with the scroll to anchor causing the title to be hidden under the navigation. (#7) Bugfix: Add nicer CSS classes to the HTML tables in bootswatch themes. (#295) Bugfix: Fix an error when passing in a specific config file with mkdocs serve . (#341) Bugfix: Don't overwrite index.md files with the mkdocs new command. (#412) Bugfix: Remove bold and italic from code in the ReadTheDocs theme. (#411) Bugfix: Display images inline in the MkDocs theme. (#415) Bugfix: Fix problems with no-highlight in the ReadTheDocs theme. (#319) Bugfix: Don't delete hidden files when using mkdocs build --clean . (#346) Bugfix: Don't block newer versions of Python-markdown on Python >= 2.7. (#376) Bugfix: Fix encoding issues when opening files across platforms. (#428) Version 0.11.1 (2014-11-20) Bugfix: Fix a CSS wrapping issue with code highlighting in the ReadTheDocs theme. (#233) Version 0.11.0 (2014-11-18) Render 404.html files if they exist for the current theme. (#194) Bugfix: Fix long nav bars, table rendering and code highlighting in MkDocs and ReadTheDocs themes. (#225) Bugfix: Fix an issue with the google_analytics code. (#219) Bugfix: Remove __pycache__ from the package tar. (#196) Bugfix: Fix markdown links that go to an anchor on the current page. (#197) Bugfix: Don't add prettyprint well CSS classes to all HTML, only add it in the MkDocs theme. (#183) Bugfix: Display section titles in the ReadTheDocs theme. (#175) Bugfix: Use the polling observer in watchdog so rebuilding works on filesystems without inotify. (#184) Bugfix: Improve error output for common configuration related errors. (#176) Version 0.10.0 (2014-10-29) Added support for Python 3.3 and 3.4. (#103) Configurable Python-Markdown extensions with the config setting markdown_extensions . (#74) Added mkdocs json command to output your rendered documentation as json files. (#128) Added --clean switch to build , json and gh-deploy commands to remove stale files from the output directory. (#157) Support multiple theme directories to allow replacement of individual templates rather than copying the full theme. (#129) Bugfix: Fix <ul> rendering in readthedocs theme. (#171) Bugfix: Improve the readthedocs theme on smaller displays. (#168) Bugfix: Relaxed required python package versions to avoid clashes. (#104) Bugfix: Fix issue rendering the table of contents with some configs. (#146) Bugfix: Fix path for embedded images in sub pages. (#138) Bugfix: Fix use_directory_urls config behavior. (#63) Bugfix: Support extra_javascript and extra_css in all themes. (#90) Bugfix: Fix path-handling under Windows. (#121) Bugfix: Fix the menu generation in the readthedocs theme. (#110) Bugfix: Fix the mkdocs command creation under Windows. (#122) Bugfix: Correctly handle external extra_javascript and extra_css . (#92) Bugfix: Fixed favicon support. (#87)","title":"Release Notes"},{"location":"about/release-notes/#release-notes","text":"","title":"Release Notes"},{"location":"about/release-notes/#upgrading","text":"To upgrade MkDocs to the latest version, use pip: pip install -U mkdocs You can determine your currently installed version using mkdocs --version : $ mkdocs --version mkdocs, version 1.0 from /path/to/mkdocs (Python 3.6)","title":"Upgrading"},{"location":"about/release-notes/#maintenance-team","text":"The current and past members of the MkDocs team. @tomchristie @d0ugal @waylan","title":"Maintenance team"},{"location":"about/release-notes/#version-101-2018-08-13","text":"Bugfix: Prevent page reload when [Enter] is pressed in search box (#1589). Bugfix: Avoid calling search until all assets are ready (#1584). Bugfix: Exclude README.md if index.md is present (#1580). Bugfix: Fix readthedocs theme navigation bug with homepage (#1576).","title":"Version 1.0.1 (2018-08-13)"},{"location":"about/release-notes/#version-10-2018-08-03","text":"","title":"Version 1.0 (2018-08-03)"},{"location":"about/release-notes/#major-additions-to-version-10","text":"","title":"Major Additions to Version 1.0"},{"location":"about/release-notes/#internal-refactor-of-pages-files-and-navigation","text":"Internal handling of pages, files and navigation has been completely refactored. The changes included in the refactor are summarized below. Support for hidden pages. All Markdown pages are now included in the build regardless of whether they are included in the navigation configuration (#699). The navigation can now include links to external sites (#989 #1373 & #1406). Page data (including titles) is properly determined for all pages before any page is rendered (#1347). Automatically populated navigation now sorts index pages to the top. In other words, The index page will be listed as the first child of a directory, while all other documents are sorted alphanumerically by file name after the index page (#73 & #1042). A README.md file is now treated as an index file within a directory and will be rendered to index.html (#608). The URLs for all files are computed once and stored in a files collection. This ensures all internal links are always computed correctly regardless of the configuration. This also allows all internal links to be validated, not just links to other Markdown pages. (#842 & #872). A new url template filter smartly ensures all URLs are relative to the current page (#1526). An on_files plugin event has been added, which could be used to include files not in the docs_dir , exclude files, redefine page URLs (i.e. implement extensionless URLs), or to manipulate files in various other ways.","title":"Internal Refactor of Pages, Files, and Navigation"},{"location":"about/release-notes/#backward-incompatible-changes","text":"As part of the internal refactor, a number of backward incompatible changes have been introduced, which are summarized below.","title":"Backward Incompatible Changes"},{"location":"about/release-notes/#urls-have-changed-when-use_directory_urls-is-false","text":"Previously, all Markdown pages would be have their filenames altered to be index pages regardless of how the use_directory_urls setting was configured. However, the path munging is only needed when use_directory_urls is set to True (the default). The path mungling no longer happens when use_directory_urls is set to False , which will result in different URLs for all pages that were not already index files. As this behavior only effects a non-default configuration, and the most common user-case for setting the option to False is for local file system ( file:// ) browsing, its not likely to effect most users. However, if you have use_directory_urls set to False for a MkDocs site hosted on a web server, most of your URLs will now be broken. As you can see below, the new URLs are much more sensible. Markdown file Old URL New URL index.md index.html index.html foo.md foo/index.html foo.html foo/bar.md foo/bar/index.html foo/bar.html Note that there has been no change to URLs or file paths when use_directory_urls is set to True (the default), except that MkDocs more consistently includes an ending slash on all internally generated URLs.","title":"URLS have changed when use_directory_urls is False"},{"location":"about/release-notes/#the-pages-configuration-setting-has-been-renamed-to-nav","text":"The pages configuration setting is deprecated and will issue a warning if set in the configuration file. The setting has been renamed nav . To update your configuration, simply rename the setting to nav . In other words, if your configuration looked like this: pages: - Home: index.md - User Guide: user-guide.md Simply edit the configuration as follows: nav: - Home: index.md - User Guide: user-guide.md In the current release, any configuration which includes a pages setting, but no nav setting, the pages configuration will be copied to nav and a warning will be issued. However, in a future release, that may no longer happen. If both pages and nav are defined, the pages setting will be ignored.","title":"The pages configuration setting has been renamed to nav"},{"location":"about/release-notes/#template-variables-and-base_url","text":"In previous versions of MkDocs some URLs expected the base_url template variable to be prepended to the URL and others did not. That inconsistency has been removed in that no URLs are modified before being added to the template context. For example, a theme template might have previously included a link to the site_name as: <a href=\"{{ nav.homepage.url }}\">{{ config.site_name }}</a> And MkDocs would magically return a URL for the homepage which was relative to the current page. That \"magic\" has been removed and the url template filter should be used: <a href=\"{{ nav.homepage.url|url }}\">{{ config.site_name }}</a> This change applies to any navigation items and pages, as well as the page.next_page and page.previous_page attributes. For the time being, the extra_javascript and extra_css variables continue to work as previously (without the url template filter), but they have been deprecated and the corresponding configuration values ( config.extra_javascript and config.extra_css respectively) should be used with the filter instead. {% for path in config['extra_css'] %} <link href=\"{{ path|url }}\" rel=\"stylesheet\"> {% endfor %} Note that navigation can now include links to external sites. Obviously, the base_url should not be prepended to these items. However, the url template filter is smart enough to recognize the URL is absolute and does not alter it. Therefore, all navigation items can be passed to the filter and only those that need to will be altered. {% for nav_item in nav %} <a href=\"{{ nav_item.url|url }}\">{{ nav_item.title }}</a> {% endfor %}","title":"Template variables and base_url"},{"location":"about/release-notes/#path-based-settings-are-relative-to-configuration-file-543","text":"Previously any relative paths in the various configuration options were resolved relative to the current working directory. They are now resolved relative to the configuration file. As the documentation has always encouraged running the various MkDocs commands from the directory that contains the configuration file (project root), this change will not affect most users. However, it will make it much easier to implement automated builds or otherwise run commands from a location other than the project root. Simply use the -f/--config-file option and point it at the configuration file: mkdocs build --config-file /path/to/my/config/file.yml As previously, if no file is specified, MkDocs looks for a file named mkdocs.yml in the current working directory.","title":"Path Based Settings are Relative to Configuration File (#543)"},{"location":"about/release-notes/#added-support-for-yaml-meta-data-1542","text":"Previously, MkDocs only supported MultiMarkdown style meta-data, which does not recognize different data types and is rather limited. MkDocs now also supports YAML style meta-data in Markdown documents. MkDocs relies on the the presence or absence of the deliminators ( --- or ... ) to determine whether YAML style meta-data or MultiMarkdown style meta-data is being used. Previously MkDocs would recognize MultiMarkdown style meta-data between the deliminators. Now, if the deliminators are detected, but the content between the deliminators is not valid YAML meta-data, MkDocs does not attempt to parse the content as MultiMarkdown style meta-data. Therefore, MultiMarkdowns style meta-data must not include the deliminators. See the MultiMarkdown style meta-data documentation for details. Prior to version 0.17, MkDocs returned all meta-data values as a list of strings (even a single line would return a list of one string). In version 0.17, that behavior was changed to return each value as a single string (multiple lines were joined), which some users found limiting (see #1471). That behavior continues for MultiMarkdown style meta-data in the current version. However, YAML style meta-data supports the full range of \"safe\" YAML data types. Therefore, it is recommended that any complex meta-data make use of the YAML style (see the YAML style meta-data documentation for details). In fact, a future version of MkDocs may deprecate support for MultiMarkdown style meta-data.","title":"Added support for YAML Meta-Data (#1542)"},{"location":"about/release-notes/#refactor-search-plugin","text":"The search plugin has been completely refactored to include support for the following features: Use a web worker in the browser with a fallback (#1396). Optionally pre-build search index locally (#859 & #1061). Upgrade to lunr.js 2.x (#1319). Support search in languages other than English (#826). Allow the user to define the word separators (#867). Only run searches for queries of length > 2 (#1127). Remove dependency on require.js (#1218). Compress the search index (#1128). Users can review the configuration options available and theme authors should review how search and themes interact.","title":"Refactor Search Plugin"},{"location":"about/release-notes/#theme_dir-configuration-option-fully-deprecated","text":"As of version 0.17, the custom_dir option replaced the deprecated theme_dir option. If users had set the theme_dir option, MkDocs version 0.17 copied the value to the theme.custom_dir option and a warning was issued. As of version 1.0, the value is no longer copied and an error is raised.","title":"theme_dir Configuration Option fully Deprecated"},{"location":"about/release-notes/#other-changes-and-additions-to-version-10","text":"Keyboard shortcuts changed to not conflict with commonly used accessibility shortcuts (#1502.) User friendly YAML parse errors (#1543). Officially support Python 3.7. A missing theme configuration file now raises an error. Empty extra_css and extra_javascript settings no longer raise a warning. Add highlight.js configuration settings to built-in themes (#1284). Close search modal when result is selected (#1527). Add a level attribute to AnchorLinks (#1272). Add MkDocs version check to gh-deploy script (#640). Improve Markdown extension error messages. (#782). Drop official support for Python 3.3 and set tornado>=5.0 (#1427). Add support for GitLab edit links (#1435). Link to GitHub issues from release notes (#644). Expand {sha} and {version} in gh-deploy commit message (#1410). Compress sitemap.xml (#1130). Defer loading JS scripts (#1380). Add a title attribute to the search input (#1379). Update RespondJS to latest version (#1398). Always load Google Analytics over HTTPS (#1397). Improve scrolling frame rate (#1394). Provide more version info. (#1393). Refactor writing-your-docs.md (#1392). Workaround Safari bug when zooming to < 100% (#1389). Remove addition of clicky class to body and animations. (#1387). Prevent search plugin from reinjecting extra_javascript files (#1388). Refactor copy_media_files util function for more flexibility (#1370). Remove PyPI Deployment Docs (#1360). Update links to Python-Markdown library (#1360). Document how to generate manpages for MkDocs commands (#686).","title":"Other Changes and Additions to Version 1.0"},{"location":"about/release-notes/#version-0175-2018-07-06","text":"Bugfix: Fix Python 3.7 and PEP 479 incompatibility (#1518).","title":"Version 0.17.5 (2018-07-06)"},{"location":"about/release-notes/#version-0174-2018-06-08","text":"Bugfix: Add multi-level nesting support to sitemap.xml (#1482).","title":"Version 0.17.4 (2018-06-08)"},{"location":"about/release-notes/#version-0173-2018-03-07","text":"Bugfix: Set dependency tornado>=4.1,<5.0 due to changes in 5.0 (#1428).","title":"Version 0.17.3 (2018-03-07)"},{"location":"about/release-notes/#version-0172-2017-11-15","text":"Bugfix: Correct extra_* config setting regressions (#1335 & #1336).","title":"Version 0.17.2 (2017-11-15)"},{"location":"about/release-notes/#version-0171-2017-10-30","text":"Bugfix: Support repo_url with missing ending slash. (#1321). Bugfix: Add length support to mkdocs.toc.TableOfContext (#1325). Bugfix: Add some theme specific settings to the search plugin for third party themes (#1316). Bugfix: Override site_url with dev_addr on local server (#1317).","title":"Version 0.17.1 (2017-10-30)"},{"location":"about/release-notes/#version-0170-2017-10-19","text":"","title":"Version 0.17.0 (2017-10-19)"},{"location":"about/release-notes/#major-additions-to-version-0170","text":"","title":"Major Additions to Version 0.17.0"},{"location":"about/release-notes/#plugin-api-206","text":"A new Plugin API has been added to MkDocs which allows users to define their own custom behaviors. See the included documentation for a full explanation of the API. The previously built-in search functionality has been removed and wrapped in a plugin (named \"search\") with no changes in behavior. When MkDocs builds, the search index is now written to search/search_index.json instead of mkdocs/search_index.json . If no plugins setting is defined in the config, then the search plugin will be included by default. See the configuration documentation for information on overriding the default.","title":"Plugin API. (#206)"},{"location":"about/release-notes/#theme-customization-1164","text":"Support had been added to provide theme specific customizations. Theme authors can define default options as documented in Theme Configuration . A theme can now inherit from another theme, define various static templates to be rendered, and define arbitrary default variables to control behavior in the templates. The theme configuration is defined in a configuration file named mkdocs_theme.yml which should be placed at the root of your template files. A warning will be raised if no configuration file is found and an error will be raised in a future release. Users can override those defaults under the theme configuration option of their mkdocs.yml configuration file, which now accepts nested options. One such nested option is the custom_dir option, which replaces the now deprecated theme_dir option. If users had previously set the theme_dir option, a warning will be issued, with an error expected in a future release. If a configuration previously defined a theme_dir like this: theme: mkdocs theme_dir: custom Then the configuration should be adjusted as follows: theme: name: mkdocs custom_dir: custom See the theme configuration option documentation for details.","title":"Theme Customization. (#1164)"},{"location":"about/release-notes/#previously-deprecated-template-variables-removed-1168","text":"","title":"Previously deprecated Template variables removed. (#1168)"},{"location":"about/release-notes/#page-template","text":"The primary entry point for page templates has been changed from base.html to main.html . This allows base.html to continue to exist while allowing users to override main.html and extend base.html . For version 0.16, base.html continued to work if no main.html template existed, but it raised a deprecation warning. In version 1.0, a build will fail if no main.html template exists.","title":"Page Template"},{"location":"about/release-notes/#context-variables","text":"Page specific variable names in the template context have been refactored as defined in Custom Themes . The old variable names issued a warning in version 0.16, but have been removed in version 1.0. Any of the following old page variables should be updated to the new ones in user created and third-party templates: Old Variable Name New Variable Name current_page page page_title page.title content page.content toc page.toc meta page.meta canonical_url page.canonical_url previous_page page.previous_page next_page page.next_page Additionally, a number of global variables have been altered and/or removed and user created and third-party templates should be updated as outlined below: Old Variable Name New Variable Name or Expression current_page page include_nav nav|length>1 include_next_prev (page.next_page or page.previous_page) site_name config.site_name site_author config.site_author page_description config.site_description repo_url config.repo_url repo_name config.repo_name site_url config.site_url copyright config.copyright google_analytics config.google_analytics homepage_url nav.homepage.url favicon {{ base_url }}/img/favicon.ico","title":"Context Variables"},{"location":"about/release-notes/#auto-populated-extra_css-and-extra_javascript-fully-deprecated-986","text":"In previous versions of MkDocs, if the extra_css or extra_javascript config settings were empty, MkDocs would scan the docs_dir and auto-populate each setting with all of the CSS and JavaScript files found. On version 0.16 this behavior was deprecated and a warning was issued. In 0.17 any unlisted CSS and JavaScript files will not be included in the HTML templates, however, a warning will be issued. In other words, they will still be copied to the site-dir , but they will not have any effect on the theme if they are not explicitly listed. All CSS and javaScript files in the docs_dir should be explicitly listed in the extra_css or extra_javascript config settings going forward.","title":"Auto-Populated extra_css and extra_javascript Fully Deprecated. (#986)"},{"location":"about/release-notes/#other-changes-and-additions-to-version-0170","text":"Add \"edit Link\" support to MkDocs theme (#1129) Open files with utf-8-sig to account for BOM (#1186) Symbolic links are now followed consistently (#1134) Support for keyboard navigation shortcuts added to included themes (#1095) Some refactoring and improvements to config_options (#1296) Officially added support for Python 3.6 (#1296) 404 Error page added to readthedocs theme (#1296)) Internal refactor of Markdown processing (#713) Removed special error message for mkdocs-bootstrap and mkdocs-bootswatch themes (#1168) The legacy pages config is no longer supported (#1168) The deprecated json command has been removed (#481) Support for Python 2.6 has been dropped (#165) File permissions are no longer copied during build (#1292) Support query and fragment strings in edit_uri (#1224 & #1273)","title":"Other Changes and Additions to Version 0.17.0"},{"location":"about/release-notes/#version-0163-2017-04-04","text":"Fix error raised by autoscrolling in the readthedocs theme (#1177) Fix a few documentation typos (#1181 & #1185) Fix a regression to livereload server introduced in 0.16.2 (#1174)","title":"Version 0.16.3 (2017-04-04)"},{"location":"about/release-notes/#version-0162-2017-03-13","text":"System root ( / ) is not a valid path for site_dir or docs_dir (#1161) Refactor readthedocs theme navigation (#1155 & #1156) Add support to dev server to serve custom error pages (#1040) Ensure nav.homepage.url is not blank on error pages (#1131) Increase livereload dependency to 2.5.1 (#1106)","title":"Version 0.16.2 (2017-03-13)"},{"location":"about/release-notes/#version-0161-2016-12-22","text":"Ensure scrollspy behavior does not affect nav bar (#1094) Only \"load\" a theme when it is explicitly requested by the user (#1105)","title":"Version 0.16.1 (2016-12-22)"},{"location":"about/release-notes/#version-016-2016-11-04","text":"","title":"Version 0.16 (2016-11-04)"},{"location":"about/release-notes/#major-additions-to-version-0160","text":"","title":"Major Additions to Version 0.16.0"},{"location":"about/release-notes/#template-variables-refactored-874","text":"","title":"Template variables refactored. (#874)"},{"location":"about/release-notes/#page-context","text":"Page specific variable names in the template context have been refactored as defined in Custom Themes . The old variable names will issue a warning but continue to work for version 0.16, but may be removed in a future version. Any of the following old page variables should be updated to the new ones in user created and third-party templates: Old Variable Name New Variable Name current_page page page_title page.title content page.content toc page.toc meta page.meta canonical_url page.canonical_url previous_page page.previous_page next_page page.next_page","title":"Page Context"},{"location":"about/release-notes/#global-context","text":"Additionally, a number of global variables have been altered and/or deprecated and user created and third-party templates should be updated as outlined below: Previously, the global variable include_nav was altered programmatically based on the number of pages in the nav. The variable will issue a warning but continue to work for version 0.16, but may be removed in a future version. Use {% if nav|length>1 %} instead. Previously, the global variable include_next_prev was altered programmatically based on the number of pages in the nav. The variable will issue a warning but continue to work for version 0.16, but may be removed in a future version. Use {% if page.next_page or page.previous_page %} instead. Previously the global variable page_description was altered programmatically based on whether the current page was the homepage. Now it simply maps to config['site_description'] . Use {% if page.is_homepage %} in the template to conditionally change the description. The global variable homepage_url maps directly to nav.homepage.url and is being deprecated. The variable will issue a warning but continue to work for version 0.16, but may be removed in a future version. Use nav.homepage.url instead. The global variable favicon maps to the configuration setting site_favicon . Both the template variable and the configuration setting are being deprecated and will issue a warning but continue to work for version 0.16, and may be removed in a future version. Use {{ base_url }}/img/favicon.ico in your template instead. Users can simply save a copy of their custom favicon icon to img/favicon.ico in either their docs_dir or theme_dir . A number of variables map directly to similarly named variables in the config . Those variables are being deprecated and will issue a warning but continue to work for version 0.16, but may be removed in a future version. Use config.var_name instead, where var_name is the name of one of the configuration variables. Below is a summary of all of the changes made to the global context: Old Variable Name New Variable Name or Expression current_page page include_nav nav|length>1 include_next_prev (page.next_page or page.previous_page) site_name config.site_name site_author config.site_author page_description config.site_description repo_url config.repo_url repo_name config.repo_name site_url config.site_url copyright config.copyright google_analytics config.google_analytics homepage_url nav.homepage.url favicon {{ base_url }}/img/favicon.ico","title":"Global Context"},{"location":"about/release-notes/#increased-template-customization-607","text":"The built-in themes have been updated by having each of their many parts wrapped in template blocks which allow each individual block to be easily overridden using the theme_dir config setting. Without any new settings, you can use a different analytics service, replace the default search function, or alter the behavior of the navigation, among other things. See the relevant documentation for more details. To enable this feature, the primary entry point for page templates has been changed from base.html to main.html . This allows base.html to continue to exist while allowing users to override main.html and extend base.html . For version 0.16, base.html will continue to work if no main.html template exists, but it is deprecated and will raise a warning. In version 1.0, a build will fail if no main.html template exists. Any custom and third party templates should be updated accordingly. The easiest way for a third party theme to be updated would be to simply add a main.html file which only contains the following line: {% extends \"base.html\" %} That way, the theme contains the main.html entry point, and also supports overriding blocks in the same manner as the built-in themes. Third party themes are encouraged to wrap the various pieces of their templates in blocks in order to support such customization.","title":"Increased Template Customization. (#607)"},{"location":"about/release-notes/#auto-populated-extra_css-and-extra_javascript-deprecated-986","text":"In previous versions of MkDocs, if the extra_css or extra_javascript config settings were empty, MkDocs would scan the docs_dir and auto-populate each setting with all of the CSS and JavaScript files found. This behavior is deprecated and a warning will be issued. In the next release, the auto-populate feature will stop working and any unlisted CSS and JavaScript files will not be included in the HTML templates. In other words, they will still be copied to the site-dir , but they will not have any effect on the theme if they are not explicitly listed. All CSS and javaScript files in the docs_dir should be explicitly listed in the extra_css or extra_javascript config settings going forward.","title":"Auto-Populated extra_css and extra_javascript Deprecated. (#986)"},{"location":"about/release-notes/#support-for-dirty-builds-990","text":"For large sites the build time required to create the pages can become problematic, thus a \"dirty\" build mode was created. This mode simply compares the modified time of the generated HTML and source markdown. If the markdown has changed since the HTML then the page is re-constructed. Otherwise, the page remains as is. This mode may be invoked in both the mkdocs serve and mkdocs build commands: mkdocs serve --dirtyreload mkdocs build --dirty It is important to note that this method for building the pages is for development of content only, since the navigation and other links do not get updated on other pages.","title":"Support for dirty builds. (#990)"},{"location":"about/release-notes/#stricter-directory-validation","text":"Previously, a warning was issued if the site_dir was a child directory of the docs_dir . This now raises an error. Additionally, an error is now raised if the docs_dir is set to the directory which contains your config file rather than a child directory. You will need to rearrange you directory structure to better conform with the documented layout .","title":"Stricter Directory Validation"},{"location":"about/release-notes/#other-changes-and-additions-to-version-0160","text":"Bugfix: Support gh-deploy command on Windows with Python 3 (#722) Bugfix: Include .woff2 font files in Python package build (#894) Various updates and improvements to Documentation Home Page/Tutorial (#870) Bugfix: Support livereload for config file changes (#735) Bugfix: Non-media template files are no longer copied with media files (#807) Add a flag (-e/--theme-dir) to specify theme directory with the commands mkdocs build and mkdocs serve (#832) Fixed issues with Unicode file names under Windows and Python 2. (#833) Improved the styling of in-line code in the MkDocs theme. (#718) Bugfix: convert variables to JSON when being passed to JavaScript (#850) Updated the ReadTheDocs theme to match the upstream font sizes and colors more closely. (#857) Fixes an issue with permalink markers showing when the mouse was far above them (#843) Bugfix: Handle periods in directory name when automatically creating the pages config. (#728) Update searching to Lunr 0.7, which comes with some performance enhancements for larger documents (#859) Bugfix: Support SOURCE_DATE_EPOCH environment variable for \"reproducible\" builds (#938) Follow links when copying media files (#869). Change \"Edit on...\" links to point directly to the file in the source repository, rather than to the root of the repository (#975), configurable via the new edit_uri setting. Bugfix: Don't override config value for strict mode if not specified on CLI (#738). Add a --force flag to the gh-deploy command to force the push to the repository (#973). Improve alignment for current selected menu item in readthedocs theme (#888). http://user.github.io/repo => https://user.github.io/repo/ (#1029). Improve installation instructions (#1028). Account for wide tables and consistently wrap inline code spans (#834). Bugfix: Use absolute URLs in nav & media links from error templates (#77).","title":"Other Changes and Additions to Version 0.16.0"},{"location":"about/release-notes/#version-0153-2016-02-18","text":"Improve the error message the given theme can't be found. Fix an issue with relative symlinks (#639)","title":"Version 0.15.3 (2016-02-18)"},{"location":"about/release-notes/#version-0152-2016-02-08","text":"Fix an incorrect warning that states external themes will be removed from MkDocs .","title":"Version 0.15.2 (2016-02-08)"},{"location":"about/release-notes/#version-0151-2016-01-30","text":"Lower the minimum supported Click version to 3.3 for package maintainers. (#763)","title":"Version 0.15.1 (2016-01-30)"},{"location":"about/release-notes/#version-0150-2016-01-21","text":"","title":"Version 0.15.0 (2016-01-21)"},{"location":"about/release-notes/#major-additions-to-version-0150","text":"","title":"Major Additions to Version 0.15.0"},{"location":"about/release-notes/#add-support-for-installable-themes","text":"MkDocs now supports themes that are distributed via Python packages. With this addition, the Bootstrap and Bootswatch themes have been moved to external git repositories and python packages. See their individual documentation for more details about these specific themes. MkDocs Bootstrap MkDocs Bootswatch They will be included with MkDocs by default until a future release. After that they will be installable with pip: pip install mkdocs-bootstrap and pip install mkdocs-bootswatch See the documentation for Styling your docs for more information about using and customizing themes and Custom themes for creating and distributing new themes","title":"Add support for installable themes"},{"location":"about/release-notes/#other-changes-and-additions-to-version-0150","text":"Fix issues when using absolute links to Markdown files. (#628) Deprecate support of Python 2.6, pending removal in 1.0.0. (#165) Add official support for Python version 3.5. Add support for site_description and site_author to the ReadTheDocs theme. (#631) Update FontAwesome to 4.5.0. (#789) Increase IE support with X-UA-Compatible. (#785) Added support for Python's -m flag. (#706) Bugfix: Ensure consistent ordering of auto-populated pages. (#638) Bugfix: Scroll the tables of contents on the MkDocs theme if it is too long for the page. (#204) Bugfix: Add all ancestors to the page attribute ancestors rather than just the initial one. (#693) Bugfix: Include HTML in the build output again. (#691) Bugfix: Provide filename to Read the Docs. (#721 and RTD#1480) Bugfix: Silence Click's unicode_literals warning. (#708)","title":"Other Changes and Additions to Version 0.15.0"},{"location":"about/release-notes/#version-0140-2015-06-09","text":"Improve Unicode handling by ensuring that all config strings are loaded as Unicode. (#592) Remove dependency on the six library. (#583) Remove dependency on the ghp-import library. (#547) Add --quiet and --verbose options to all sub-commands. (#579) Add short options ( -a ) to most command line options. (#579) Add copyright footer for readthedocs theme. (#568) If the requested port in mkdocs serve is already in use, don't show the user a full stack trace. (#596) Bugfix: Fix a JavaScript encoding problem when searching with spaces. (#586) Bugfix: gh-deploy now works if the mkdocs.yml is not in the git repo root. (#578) Bugfix: Handle (pass-through instead of dropping) HTML entities while parsing TOC. (#612) Bugfix: Default extra_templates to an empty list, don't automatically discover them. (#616)","title":"Version 0.14.0 (2015-06-09)"},{"location":"about/release-notes/#version-0133-2015-06-02","text":"Bugfix: Reduce validation error to a warning if the site_dir is within the docs_dir as this shouldn't cause any problems with building but will inconvenience users building multiple times. (#580)","title":"Version 0.13.3 (2015-06-02)"},{"location":"about/release-notes/#version-0132-2015-05-30","text":"Bugfix: Ensure all errors and warnings are logged before exiting. (#536) Bugfix: Fix compatibility issues with ReadTheDocs. (#554)","title":"Version 0.13.2 (2015-05-30)"},{"location":"about/release-notes/#version-0131-2015-05-27","text":"Bugfix: Fix a problem with minimal configurations which only contain a list of paths in the pages config. (#562)","title":"Version 0.13.1 (2015-05-27)"},{"location":"about/release-notes/#version-0130-2015-05-26","text":"","title":"Version 0.13.0 (2015-05-26)"},{"location":"about/release-notes/#deprecations-to-version-0130","text":"","title":"Deprecations to Version 0.13.0"},{"location":"about/release-notes/#deprecate-the-json-command","text":"In this release the mkdocs json command has been marked as deprecated and when used a deprecation warning will be shown. It will be removed in a future release of MkDocs, version 1.0 at the latest. The mkdocs json command provided a convenient way for users to output the documentation contents as JSON files but with the additions of search to MkDocs this functionality is duplicated. A new index with all the contents from a MkDocs build is created in the site_dir , so with the default value for the site_dir It can be found in site/mkdocs/search_index.json . This new file is created on every MkDocs build (with mkdocs build ) and no configuration is needed to enable it.","title":"Deprecate the JSON command"},{"location":"about/release-notes/#change-the-pages-configuration","text":"Provide a new way to define pages, and specifically nested pages , in the mkdocs.yml file and deprecate the existing approach, support will be removed with MkDocs 1.0.","title":"Change the pages configuration"},{"location":"about/release-notes/#warn-users-about-the-removal-of-builtin-themes","text":"All themes other than mkdocs and readthedocs will be moved into external packages in a future release of MkDocs. This will enable them to be more easily supported and updates outside MkDocs releases.","title":"Warn users about the removal of builtin themes"},{"location":"about/release-notes/#major-additions-to-version-0130","text":"","title":"Major Additions to Version 0.13.0"},{"location":"about/release-notes/#search","text":"Support for search has now been added to MkDocs. This is based on the JavaScript library lunr.js . It has been added to both the mkdocs and readthedocs themes. See the custom theme documentation on supporting search for adding it to your own themes.","title":"Search"},{"location":"about/release-notes/#new-command-line-interface","text":"The command line interface for MkDocs has been re-written with the Python library Click . This means that MkDocs now has an easier to use interface with better help output. This change is partially backwards incompatible as while undocumented it was possible to pass any configuration option to the different commands. Now only a small subset of the configuration options can be passed to the commands. To see in full commands and available arguments use mkdocs --help and mkdocs build --help to have them displayed.","title":"New Command Line Interface"},{"location":"about/release-notes/#support-extra-html-and-xml-files","text":"Like the extra_javascript and extra_css configuration options, a new option named extra_templates has been added. This will automatically be populated with any .html or .xml files in the project docs directory. Users can place static HTML and XML files and they will be copied over, or they can also use Jinja2 syntax and take advantage of the global variables . By default MkDocs will use this approach to create a sitemap for the documentation.","title":"Support Extra HTML and XML files"},{"location":"about/release-notes/#other-changes-and-additions-to-version-0130","text":"Add support for Markdown extension configuration options . (#435) MkDocs now ships Python wheels . (#486) Only include the build date and MkDocs version on the homepage. (#490) Generate sitemaps for documentation builds. (#436) Add a clearer way to define nested pages in the configuration. (#482) Add an extra config option for passing arbitrary variables to the template. (#510) Add --no-livereload to mkdocs serve for a simpler development server. (#511) Add copyright display support to all themes (#549) Add support for custom commit messages in a mkdocs gh-deploy (#516) Bugfix: Fix linking to media within the same directory as a markdown file called index.md (#535) Bugfix: Fix errors with Unicode filenames (#542).","title":"Other Changes and Additions to Version 0.13.0"},{"location":"about/release-notes/#version-0122-2015-04-22","text":"Bugfix: Fix a regression where there would be an error if some child titles were missing but others were provided in the pages config. (#464)","title":"Version 0.12.2 (2015-04-22)"},{"location":"about/release-notes/#version-0121-2015-04-14","text":"Bugfix: Fixed a CSS bug in the table of contents on some browsers where the bottom item was not clickable.","title":"Version 0.12.1 (2015-04-14)"},{"location":"about/release-notes/#version-0120-2015-04-14","text":"Display the current MkDocs version in the CLI output. (#258) Check for CNAME file when using gh-deploy. (#285) Add the homepage back to the navigation on all themes. (#271) Add a strict more for local link checking. (#279) Add Google analytics support to all themes. (#333) Add build date and MkDocs version to the ReadTheDocs and MkDocs theme outputs. (#382) Standardize highlighting across all themes and add missing languages. (#387) Add a verbose flag. (-v) to show more details about what the build. (#147) Add the option to specify a remote branch when deploying to GitHub. This enables deploying to GitHub pages on personal and repo sites. (#354) Add favicon support to the ReadTheDocs theme HTML. (#422) Automatically refresh the browser when files are edited. (#163) Bugfix: Never re-write URLs in code blocks. (#240) Bugfix: Don't copy ditfiles when copying media from the docs_dir . (#254) Bugfix: Fix the rendering of tables in the ReadTheDocs theme. (#106) Bugfix: Add padding to the bottom of all bootstrap themes. (#255) Bugfix: Fix issues with nested Markdown pages and the automatic pages configuration. (#276) Bugfix: Fix a URL parsing error with GitHub enterprise. (#284) Bugfix: Don't error if the mkdocs.yml is completely empty. (#288) Bugfix: Fix a number of problems with relative URLs and Markdown files. (#292) Bugfix: Don't stop the build if a page can't be found, continue with other pages. (#150) Bugfix: Remove the site_name from the page title, this needs to be added manually. (#299) Bugfix: Fix an issue with table of contents cutting off Markdown. (#294) Bugfix: Fix hostname for BitBucket. (#339) Bugfix: Ensure all links end with a slash. (#344) Bugfix: Fix repo links in the readthedocs theme. (#365) Bugfix: Include jQuery locally to avoid problems using MkDocs offline. (#143) Bugfix: Don't allow the docs_dir to be in the site_dir or vice versa. (#384) Bugfix: Remove inline CSS in the ReadTheDocs theme. (#393) Bugfix: Fix problems with the child titles due to the order the pages config was processed. (#395) Bugfix: Don't error during live reload when the theme doesn't exist. (#373) Bugfix: Fix problems with the Meta extension when it may not exist. (#398) Bugfix: Wrap long inline code otherwise they will run off the screen. (#313) Bugfix: Remove HTML parsing regular expressions and parse with HTMLParser to fix problems with titles containing code. (#367) Bugfix: Fix an issue with the scroll to anchor causing the title to be hidden under the navigation. (#7) Bugfix: Add nicer CSS classes to the HTML tables in bootswatch themes. (#295) Bugfix: Fix an error when passing in a specific config file with mkdocs serve . (#341) Bugfix: Don't overwrite index.md files with the mkdocs new command. (#412) Bugfix: Remove bold and italic from code in the ReadTheDocs theme. (#411) Bugfix: Display images inline in the MkDocs theme. (#415) Bugfix: Fix problems with no-highlight in the ReadTheDocs theme. (#319) Bugfix: Don't delete hidden files when using mkdocs build --clean . (#346) Bugfix: Don't block newer versions of Python-markdown on Python >= 2.7. (#376) Bugfix: Fix encoding issues when opening files across platforms. (#428)","title":"Version 0.12.0 (2015-04-14)"},{"location":"about/release-notes/#version-0111-2014-11-20","text":"Bugfix: Fix a CSS wrapping issue with code highlighting in the ReadTheDocs theme. (#233)","title":"Version 0.11.1 (2014-11-20)"},{"location":"about/release-notes/#version-0110-2014-11-18","text":"Render 404.html files if they exist for the current theme. (#194) Bugfix: Fix long nav bars, table rendering and code highlighting in MkDocs and ReadTheDocs themes. (#225) Bugfix: Fix an issue with the google_analytics code. (#219) Bugfix: Remove __pycache__ from the package tar. (#196) Bugfix: Fix markdown links that go to an anchor on the current page. (#197) Bugfix: Don't add prettyprint well CSS classes to all HTML, only add it in the MkDocs theme. (#183) Bugfix: Display section titles in the ReadTheDocs theme. (#175) Bugfix: Use the polling observer in watchdog so rebuilding works on filesystems without inotify. (#184) Bugfix: Improve error output for common configuration related errors. (#176)","title":"Version 0.11.0 (2014-11-18)"},{"location":"about/release-notes/#version-0100-2014-10-29","text":"Added support for Python 3.3 and 3.4. (#103) Configurable Python-Markdown extensions with the config setting markdown_extensions . (#74) Added mkdocs json command to output your rendered documentation as json files. (#128) Added --clean switch to build , json and gh-deploy commands to remove stale files from the output directory. (#157) Support multiple theme directories to allow replacement of individual templates rather than copying the full theme. (#129) Bugfix: Fix <ul> rendering in readthedocs theme. (#171) Bugfix: Improve the readthedocs theme on smaller displays. (#168) Bugfix: Relaxed required python package versions to avoid clashes. (#104) Bugfix: Fix issue rendering the table of contents with some configs. (#146) Bugfix: Fix path for embedded images in sub pages. (#138) Bugfix: Fix use_directory_urls config behavior. (#63) Bugfix: Support extra_javascript and extra_css in all themes. (#90) Bugfix: Fix path-handling under Windows. (#121) Bugfix: Fix the menu generation in the readthedocs theme. (#110) Bugfix: Fix the mkdocs command creation under Windows. (#122) Bugfix: Correctly handle external extra_javascript and extra_css . (#92) Bugfix: Fixed favicon support. (#87)","title":"Version 0.10.0 (2014-10-29)"},{"location":"user-guide/configuration/","text":"C. Repository Module Modul ini berisi verifikasi , proses Harvesting dan pengindeksan library ke IOS. Diperlukan Login sebagai Admin/Verifikator Perpusnas. 1. Mendaftarkan dan Mengatur Repository Untuk Mendaftarkan dan Mengatur Repository , pertama-tama Anda harus login sebagai Admin/Reviewer/Volunteer Perpusnas. Pada menu Harvest terdapat beberapa status , antara lain: Harvested, New, Failed, Reharvesting, Reindexed, Reharvest, Queuing, Deleted, dan Reindex . Untuk memverifikasi, tekan salah satu menu Harvest , misalnya New . Lalu tekan Edit di menu Action . Maka form untuk review akan muncul. Ada tiga hasil review, antara lain: Pending, OK, Invalid, dan Deleted . Alasan dapat dipilih satu dari beberapa pilihan (OAI is valid, Invalid OAI URL, Invalid OAI Response format, Harvesting Error, OAI URL is obsolete, Server is down or uncreachable, dan source is already exist . Pemberitahuan hasil review dapat melalui email dengan menceklis kirim email notifikasi kepada admin repositori ini . Setelah itu ada pilihan aksi antara lain: lanjutkan harvesting sebelumnya, harvest ulang semua record, index ulang semua record, hapus semua record , dan tidak ada . Selanjutnya proses diakhiri dengan menekan Simpan . 2. Monitoring Repository Status repository dapat dilihat dengan menekan tombol View Log Details yang berisi informasi proses verifikasi dan harvesting . 3. Repository Crawling, Indexing, & Deletion Crawling, Indexing, dan Deletion dapat dilakukan lewat menu verifikasi form repositori. Pada bagian aksi terdapat beberapa aktivitas antara lain: lanjut harvesting sebelumnya, harvest ulang semua record, index ulang semua record, hapus semuar record, dan tidak ada . Ketika tombol Simpan ditekan, proses dijalankan yang ditunjukan di menu monitoring dan status. 4. Seting Widget Ada tiga widget yang disediakan oleh IOS, antara lain: Institution, Library, dan Repository . Widget diset otomatis yang akan mengarahkan ke dashboard institusi/library/repository pada IOS, setelah tombol Widget ditekan. Selanjutnya kode dapat dikopi ke website institusi/library/repository yang mengarahkan ke dashboard di IOS.","title":"C. Modul Repositori"},{"location":"user-guide/configuration/#c-repository-module","text":"Modul ini berisi verifikasi , proses Harvesting dan pengindeksan library ke IOS. Diperlukan Login sebagai Admin/Verifikator Perpusnas.","title":"C. Repository Module"},{"location":"user-guide/configuration/#1-mendaftarkan-dan-mengatur-repository","text":"Untuk Mendaftarkan dan Mengatur Repository , pertama-tama Anda harus login sebagai Admin/Reviewer/Volunteer Perpusnas. Pada menu Harvest terdapat beberapa status , antara lain: Harvested, New, Failed, Reharvesting, Reindexed, Reharvest, Queuing, Deleted, dan Reindex . Untuk memverifikasi, tekan salah satu menu Harvest , misalnya New . Lalu tekan Edit di menu Action . Maka form untuk review akan muncul. Ada tiga hasil review, antara lain: Pending, OK, Invalid, dan Deleted . Alasan dapat dipilih satu dari beberapa pilihan (OAI is valid, Invalid OAI URL, Invalid OAI Response format, Harvesting Error, OAI URL is obsolete, Server is down or uncreachable, dan source is already exist . Pemberitahuan hasil review dapat melalui email dengan menceklis kirim email notifikasi kepada admin repositori ini . Setelah itu ada pilihan aksi antara lain: lanjutkan harvesting sebelumnya, harvest ulang semua record, index ulang semua record, hapus semua record , dan tidak ada . Selanjutnya proses diakhiri dengan menekan Simpan .","title":"1. Mendaftarkan dan Mengatur Repository"},{"location":"user-guide/configuration/#2-monitoring-repository","text":"Status repository dapat dilihat dengan menekan tombol View Log Details yang berisi informasi proses verifikasi dan harvesting .","title":"2. Monitoring Repository"},{"location":"user-guide/configuration/#3-repository-crawling-indexing-deletion","text":"Crawling, Indexing, dan Deletion dapat dilakukan lewat menu verifikasi form repositori. Pada bagian aksi terdapat beberapa aktivitas antara lain: lanjut harvesting sebelumnya, harvest ulang semua record, index ulang semua record, hapus semuar record, dan tidak ada . Ketika tombol Simpan ditekan, proses dijalankan yang ditunjukan di menu monitoring dan status.","title":"3. Repository Crawling, Indexing, &amp; Deletion"},{"location":"user-guide/configuration/#4-seting-widget","text":"Ada tiga widget yang disediakan oleh IOS, antara lain: Institution, Library, dan Repository . Widget diset otomatis yang akan mengarahkan ke dashboard institusi/library/repository pada IOS, setelah tombol Widget ditekan. Selanjutnya kode dapat dikopi ke website institusi/library/repository yang mengarahkan ke dashboard di IOS.","title":"4. Seting Widget"},{"location":"user-guide/custom-themes/","text":"Custom themes A guide to creating and distributing custom themes. !!! Note If you are looking for third party themes, they are listed in the MkDocs [community wiki](https://github.com/mkdocs/mkdocs/wiki/MkDocs-Themes). If you want to share a theme you create, you should list it on the Wiki. When creating a new theme, you can either follow the steps in this guide to create one from scratch or you can download the mkdocs-basic-theme as a basic, yet complete, theme with all the boilerplate required. You can find this base theme on GitHub . It contains detailed comments in the code to describe the different features and their usage. Creating a custom theme The bare minimum required for a custom theme is a main.html Jinja2 template file which is placed in a directory that is not a child of the docs_dir . Within mkdocs.yml , set the theme. custom_dir option to the path of the directory containing main.html . The path should be relative to the configuration file. For example, given this example project layout: mkdocs.yml docs/ index.md about.md custom_theme/ main.html ... ... you would include the following settings in mkdocs.yml to use the custom theme directory: theme: name: null custom_dir: 'custom_theme/' !!! Note Generally, when building your own custom theme, the theme.[name] configuration setting would be set to `null`. However, if the theme.[custom_dir] configuration value is used in combination with an existing theme, the theme.[custom_dir] can be used to replace only specific parts of a built-in theme. For example, with the above layout and if you set `name: \"mkdocs\"` then the `main.html` file in the theme.[custom_dir] would replace the file of the same name in the `mkdocs` theme but otherwise the `mkdocs` theme would remain unchanged. This is useful if you want to make small adjustments to an existing theme. For more specific information, see [styling your docs]. Basic theme The simplest main.html file is the following: <!DOCTYPE html> <html> <head> <title>{% if page_title %}{{ page_title }} - {% endif %}{{ site_name }}</title> </head> <body> {{ content }} </body> </html> Article content from each page specified in mkdocs.yml is inserted using the {{ content }} tag. Style-sheets and scripts can be brought into this theme as with a normal HTML file. Navbars and tables of contents can also be generated and included automatically, through the nav and toc objects, respectively. If you wish to write your own theme, it is recommended to start with one of the built-in themes and modify it accordingly. !!! Note As MkDocs uses [Jinja] as its template engine, you have access to all the power of Jinja, including [template inheritance]. You may notice that the themes included with MkDocs make extensive use of template inheritance and blocks, allowing users to easily override small bits and pieces of the templates from the theme [custom_dir]. Therefore, the built-in themes are implemented in a `base.html` file, which `main.html` extends. Although not required, third party template authors are encouraged to follow a similar pattern and may want to define the same [blocks] as are used in the built-in themes for consistency. Template Variables Each template in a theme is built with a template context. These are the variables that are available to themes. The context varies depending on the template that is being built. At the moment templates are either built with the global context or with a page specific context. The global context is used for HTML pages that don't represent an individual Markdown document, for example a 404.html page or search.html. Global Context The following variables are available globally on any template. config The config variable is an instance of MkDocs' config object generated from the mkdocs.yml config file. While you can use any config option, some commonly used options include: config.site_name config.site_url config.site_author config.site_description config.extra_javascript config.extra_css config.repo_url config.repo_name config.copyright config.google_analytics nav The nav variable is used to create the navigation for the documentation. The nav object is an iterable of navigation objects as defined by the nav configuration setting. In addition to the iterable of navigation objects , the nav object contains the following attributes: nav.homepage The page object for the homepage of the site. nav.pages A flat list of all page objects contained in the navigation. This list is not necessarily a complete list of all site pages as it does not contain pages which are not included in the navigation. This list does match the list and order of pages used for all \"next page\" and \"previous page\" links. For a list of all pages, use the pages template variable. Nav Example Following is a basic usage example which outputs the first and second level navigation as a nested list. {% if nav|length>1 %} <ul> {% for nav_item in nav %} {% if nav_item.children %} <li>{{ nav_item.title }} <ul> {% for nav_item in nav_item.children %} <li class=\"{% if nav_item.active%}current{% endif %}\"> <a href=\"{{ nav_item.url|url }}\">{{ nav_item.title }}</a> </li> {% endfor %} </ul> </li> {% else %} <li class=\"{% if nav_item.active%}current{% endif %}\"> <a href=\"{{ nav_item.url|url }}\">{{ nav_item.title }}</a> </li> {% endif %} {% endfor %} </ul> {% endif %} base_url The base_url provides a relative path to the root of the MkDocs project. While this can be used directly by prepending it to a local relative URL, it is best to use the url template filter, which is smarter about how it applies base_url . mkdocs_version Contains the current MkDocs version. build_date_utc A Python datetime object that represents the date and time the documentation was built in UTC. This is useful for showing how recently the documentation was updated. pages A list of page objects including all pages in the project. The list is a flat list with all pages sorted alphanumerically by directory and file name. Note that index pages sort to the top within a directory. This list can contain pages not included in the global navigation and may not match the order of pages within that navigation. page In templates which are not rendered from a Markdown source file, the page variable is None . In templates which are rendered from a Markdown source file, the page variable contains a page object. The same page objects are used as page navigation objects in the global navigation and in the pages template variable. All page objects contain the following attributes: page.title Contains the Title for the current page. page.content The rendered Markdown as HTML, this is the contents of the documentation. page.toc An iterable object representing the Table of contents for a page. Each item in the toc is an AnchorLink which contains the following attributes: AnchorLink.title : The text of the item. AnchorLink.url : The hash fragment of a URL pointing to the item. AnchorLink.level : The zero-based level of the item. AnchorLink.children : An iterable of any child items. The following example would display the top two levels of the Table of Contents for a page. <ul> {% for toc_item in page.toc %} <li><a href=\"{{ toc_item.url }}\">{{ toc_item.title }}</a></li> {% for toc_item in toc_item.children %} <li><a href=\"{{ toc_item.url }}\">{{ toc_item.title }}</a></li> {% endfor %} {% endfor %} </ul> page.meta A mapping of the metadata included at the top of the markdown page. In this example we define a source property above the page title. source: generics.py mixins.py # Page title Content... A template can access this metadata for the page with the meta.source variable. This could then be used to link to source files related to the documentation page. {% for filename in page.meta.source %} <a class=\"github\" href=\"https://github.com/.../{{ filename }}\"> <span class=\"label label-info\">{{ filename }}</span> </a> {% endfor %} page.url The URL of the page relative to the MkDocs site_dir . It is expected that this be used with the url filter to ensure the URL is relative to the current page. <a href=\"{{ page.url|url }}\">{{ page.title }}</a> page.abs_url The absolute URL of the page from the server root as determined by the value assigned to the site_url configuration setting. The value includes any subdirectory included in the site_url , but not the domain. base_url should not be used with this variable. For example, if site_url: https://example.com/ , then the value of page.abs_url for the page foo.md would be /foo/ . However, if site_url: https://example.com/bar/ , then the value of page.abs_url for the page foo.md would be /bar/foo/ . page.canonical_url The full, canonical URL to the current page as determined by the value assigned to the site_url configuration setting. The value includes the domain and any subdirectory included in the site_url . base_url should not be used with this variable. page.edit_url The full URL to the source page in the source repository. Typically used to provide a link to edit the source page. base_url should not be used with this variable. page.is_homepage Evaluates to True for the homepage of the site and False for all other pages. This can be used in conjunction with other attributes of the page object to alter the behavior. For example, to display a different title on the homepage: {% if not page.is_homepage %}{{ page.title }} - {% endif %}{{ site_name }} page.previous_page The page object for the previous page or None . The value will be None if the current page is the first item in the site navigation or if the current page is not included in the navigation at all. When the value is a page object, the usage is the same as for page . page.next_page The page object for the next page or None . The value will be None if the current page is the last item in the site navigation or if the current page is not included in the navigation at all. When the value is a page object, the usage is the same as for page . page.parent The immediate parent of the page in the site navigation . None if the page is at the top level. page.children Pages do not contain children and the attribute is always None . page.active When True , indicates that this page is the currently viewed page. Defaults to False . page.is_section Indicates that the navigation object is a \"section\" object. Always False for page objects. page.is_page Indicates that the navigation object is a \"page\" object. Always True for page objects. page.is_link Indicates that the navigation object is a \"link\" object. Always False for page objects. Navigation Objects Navigation objects contained in the nav template variable may be one of section objects, page objects, and link objects. While section objects may contain nested navigation objects, pages and links do not. Page objects are the full page object as used for the current page with all of the same attributes available. Section and Link objects contain a subset of those attributes as defined below: Section A section navigation object defines a named section in the navigation and contains a list of child navigation objects. Note that sections do not contain URLs and are not links of any kind. However, by default, MkDocs sorts index pages to the top and the first child might be used as the URL for a section if a theme choses to do so. The following attributes are available on section objects: section.title The title of the section. section.parent The immediate parent of the section or None if the section is at the top level. section.children An iterable of all child navigation objects. Children may include nested sections, pages and links. section.active When True , indicates that a child page of this section is the current page and can be used to highlight the section as the currently viewed section. Defaults to False . section.is_section Indicates that the navigation object is a \"section\" object. Always True for section objects. section.is_page Indicates that the navigation object is a \"page\" object. Always False for section objects. section.is_link Indicates that the navigation object is a \"link\" object. Always False for section objects. Link A link navigation object contains a link which does not point to an internal MkDocs page. The following attributes are available on link objects: link.title The title of the link. This would generally be used as the label of the link. link.url The URL that the link points to. The URL should always be an absolute URLs and should not need to have base_url prepened. link.parent The immediate parent of the link. None if the link is at the top level. link.children Links do not contain children and the attribute is always None . link.active External links cannot be \"active\" and the attribute is always False . link.is_section Indicates that the navigation object is a \"section\" object. Always False for link objects. link.is_page Indicates that the navigation object is a \"page\" object. Always False for link objects. link.is_link Indicates that the navigation object is a \"link\" object. Always True for link objects. Extra Context Additional variables can be passed to the template with the extra configuration option. This is a set of key value pairs that can make custom templates far more flexible. For example, this could be used to include the project version of all pages and a list of links related to the project. This can be achieved with the following extra configuration: extra: version: 0.13.0 links: - https://github.com/mkdocs - https://docs.readthedocs.org/en/latest/builds.html#mkdocs - https://www.mkdocs.org/ And then displayed with this HTML in the custom theme. {{ config.extra.version }} {% if config.extra.links %} <ul> {% for link in config.extra.links %} <li>{{ link }}</li> {% endfor %} </ul> {% endif %} Template Filters In addition to Jinja's default filters, the following custom filters are available to use in MkDocs templates: url Normalizes a URL. Absolute URLs are passed through unaltered. If the URL is relative and the template context includes a page object, then the URL is returned relative to the page object. Otherwise, the URL is returned with base_url prepended. <a href=\"{{ page.url|url }}\">{{ page.title }}</a> tojson Safety convert a Python object to a value in a JavaScript script. <script> var mkdocs_page_name = {{ page.title|tojson|safe }}; </script> Search and themes As of MkDocs version 0.17 client side search support has been added to MkDocs via the search plugin. A theme needs to provide a few things for the plugin to work with the theme. While the search plugin is activated by default, users can disable the plugin and themes should account for this. It is recommended that theme templates wrap search specific markup with a check for the plugin: {% if 'search' in config['plugins'] %} search stuff here... {% endif %} At its most basic functionality, the search plugin will simply provide an index file which is no more than a JSON file containing the content of all pages. The theme would need to implement its own search functionality client-side. However, with a few settings and the necessary templates, the plugin can provide a complete functioning client-side search tool based on lunr.js . The following HTML needs to be added to the theme so that the provided JavaScript is able to properly load the search scripts and make relative links to the search results from the current page. <script>var base_url = '{{ base_url }}';</script> With properly configured settings, the following HTML in a template will add a full search implementation to your theme. <h1 id=\"search\">Search Results</h1> <form action=\"search.html\"> <input name=\"q\" id=\"mkdocs-search-query\" type=\"text\" > </form> <div id=\"mkdocs-search-results\"> Sorry, page not found. </div> The JavaScript in the plugin works by looking for the specific ID's used in the above HTML. The form input for the user to type the search query must be identified with id=\"mkdocs-search-query\" and the div where the results will be placed must be identified with id=\"mkdocs-search-results\" . The plugin supports the following options being set in the theme's configuration file , mkdocs_theme.yml : include_search_page Determines whether the search plugin expects the theme to provide a dedicated search page via a template located at search/search.html . When include_search_page is set to true , the search template will be built and available at search/search.html . This method is used by the readthedocs theme. When include_search_page is set to false or not defined, it is expected that the theme provide some other mechanisms for displaying search results. For example, the mkdocs theme displays results on any page via a modal. search_index_only Determines whether the search plugin should only generate a search index or a complete search solution. When search_index_only is set to false , then the search plugin modifies the Jinja environment by adding its own templates directory (with a lower precedence than the theme) and adds its scripts to the extra_javascript config setting. When search_index_only is set to true or not defined, the search plugin makes no modifications to the Jinja environment. A complete solution using the provided index file is the responsibility of the theme. The search index is written to a JSON file at search/search_index.json in the site_dir . The JSON object contained within the file may contain up to three objects. { config: {...}, data: [...], index: {...} } If present, the config object contains the key/value pairs of config options defined for the plugin in the user's mkdocs.yml config file under plugings.search . The config object was new in MkDocs version 1.0 . The data object contains a list of document objects. Each document object is made up of a location (URL), a title , and text which can be used to create a search index and/or display search results. If present, the index object contains a pre-built index which offers performance improvements for larger sites. Note that the pre-built index is only created if the user explicitly enables the prebuild_index config option. Themes should expect the index to not be present, but can choose to use the index when it is available. The index object was new in MkDocs version 1.0 . Packaging Themes MkDocs makes use of Python packaging to distribute themes. This comes with a few requirements. To see an example of a package containing one theme, see the MkDocs Bootstrap theme and to see a package that contains many themes, see the MkDocs Bootswatch theme . !!! Note It is not strictly necessary to package a theme, as the entire theme can be contained in the `custom_dir`. If you have created a \"one-off theme,\" that should be sufficient. However, if you intend to distribute your theme for others to use, packaging the theme has some advantages. By packaging your theme, your users can more easily install it and they can then take advantage of the [custom_dir] to make tweaks to your theme to better suit their needs. Package Layout The following layout is recommended for themes. Two files at the top level directory called MANIFEST.in and setup.py beside the theme directory which contains an empty __init__.py file, a theme configuration file ( mkdocs-theme.yml ), and your template and media files. . |-- MANIFEST.in |-- theme_name | |-- __init__.py | |-- mkdocs-theme.yml | |-- main.html | |-- styles.css `-- setup.py The MANIFEST.in file should contain the following contents but with theme_name updated and any extra file extensions added to the include. recursive-include theme_name *.ico *.js *.css *.png *.html *.eot *.svg *.ttf *.woff recursive-exclude * __pycache__ recursive-exclude * *.py[co] The setup.py should include the following text with the modifications described below. from setuptools import setup, find_packages VERSION = '0.0.1' setup( name=\"mkdocs-themename\", version=VERSION, url='', license='', description='', author='', author_email='', packages=find_packages(), include_package_data=True, entry_points={ 'mkdocs.themes': [ 'themename = theme_name', ] }, zip_safe=False ) Fill in the URL, license, description, author and author email address. The name should follow the convention mkdocs-themename (like mkdocs- bootstrap and mkdocs-bootswatch ), starting with MkDocs, using hyphens to separate words and including the name of your theme. Most of the rest of the file can be left unedited. The last section we need to change is the entry_points. This is how MkDocs finds the theme(s) you are including in the package. The name on the left is the one that users will use in their mkdocs.yml and the one on the right is the directory containing your theme files. The directory you created at the start of this section with the main.html file should contain all of the other theme files. The minimum requirement is that it includes a main.html for the theme. It must also include a __init__.py file which should be empty, this file tells Python that the directory is a package. Theme Configuration A packaged theme is required to include a configuration file named mkdocs_theme.yml which is placed in the root of your template files. The file should contain default configuration options for the theme. However, if the theme offers no configuration options, the file is still required and can be left blank. The theme author is free to define any arbitrary options deemed necessary and those options will be made available in the templates to control behavior. For example, a theme might want to make a sidebar optional and include the following in the mkdocs_theme.yml file: show_sidebar: true Then in a template, that config option could be referenced: {% if config.theme.show_sidebar %} <div id=\"sidebar\">...</div> {% endif %} And the user could override the default in their project's mkdocs.yml config file: theme: name: themename show_sidebar: false In addition to arbitrary options defined by the theme, MkDocs defines a few special options which alters its behavior: !!! block \"\" #### static_templates This option mirrors the [theme] config option of the same name and allows some defaults to be set by the theme. Note that while the user can add templates to this list, the user cannot remove templates included in the theme's config. #### extends Defines a parent theme that this theme inherits from. The value should be the string name of the parent theme. Normal Jinja inheritance rules apply. Plugins may also define some options which allow the theme to inform a plugin about which set of plugin options it expects. See the documentation for any plugins you may wish to support in your theme. Distributing Themes With the above changes, your theme should now be ready to install. This can be done with pip, using pip install . if you are still in the same directory as the setup.py. Most Python packages, including MkDocs, are distributed on PyPI. To do this, you should run the following command. python setup.py register If you don't have an account setup, you should be prompted to create one. For a much more detailed guide, see the official Python packaging documentation for Packaging and Distributing Projects .","title":"Custom themes"},{"location":"user-guide/custom-themes/#custom-themes","text":"A guide to creating and distributing custom themes. !!! Note If you are looking for third party themes, they are listed in the MkDocs [community wiki](https://github.com/mkdocs/mkdocs/wiki/MkDocs-Themes). If you want to share a theme you create, you should list it on the Wiki. When creating a new theme, you can either follow the steps in this guide to create one from scratch or you can download the mkdocs-basic-theme as a basic, yet complete, theme with all the boilerplate required. You can find this base theme on GitHub . It contains detailed comments in the code to describe the different features and their usage.","title":"Custom themes"},{"location":"user-guide/custom-themes/#creating-a-custom-theme","text":"The bare minimum required for a custom theme is a main.html Jinja2 template file which is placed in a directory that is not a child of the docs_dir . Within mkdocs.yml , set the theme. custom_dir option to the path of the directory containing main.html . The path should be relative to the configuration file. For example, given this example project layout: mkdocs.yml docs/ index.md about.md custom_theme/ main.html ... ... you would include the following settings in mkdocs.yml to use the custom theme directory: theme: name: null custom_dir: 'custom_theme/' !!! Note Generally, when building your own custom theme, the theme.[name] configuration setting would be set to `null`. However, if the theme.[custom_dir] configuration value is used in combination with an existing theme, the theme.[custom_dir] can be used to replace only specific parts of a built-in theme. For example, with the above layout and if you set `name: \"mkdocs\"` then the `main.html` file in the theme.[custom_dir] would replace the file of the same name in the `mkdocs` theme but otherwise the `mkdocs` theme would remain unchanged. This is useful if you want to make small adjustments to an existing theme. For more specific information, see [styling your docs].","title":"Creating a custom theme"},{"location":"user-guide/custom-themes/#basic-theme","text":"The simplest main.html file is the following: <!DOCTYPE html> <html> <head> <title>{% if page_title %}{{ page_title }} - {% endif %}{{ site_name }}</title> </head> <body> {{ content }} </body> </html> Article content from each page specified in mkdocs.yml is inserted using the {{ content }} tag. Style-sheets and scripts can be brought into this theme as with a normal HTML file. Navbars and tables of contents can also be generated and included automatically, through the nav and toc objects, respectively. If you wish to write your own theme, it is recommended to start with one of the built-in themes and modify it accordingly. !!! Note As MkDocs uses [Jinja] as its template engine, you have access to all the power of Jinja, including [template inheritance]. You may notice that the themes included with MkDocs make extensive use of template inheritance and blocks, allowing users to easily override small bits and pieces of the templates from the theme [custom_dir]. Therefore, the built-in themes are implemented in a `base.html` file, which `main.html` extends. Although not required, third party template authors are encouraged to follow a similar pattern and may want to define the same [blocks] as are used in the built-in themes for consistency.","title":"Basic theme"},{"location":"user-guide/custom-themes/#template-variables","text":"Each template in a theme is built with a template context. These are the variables that are available to themes. The context varies depending on the template that is being built. At the moment templates are either built with the global context or with a page specific context. The global context is used for HTML pages that don't represent an individual Markdown document, for example a 404.html page or search.html.","title":"Template Variables"},{"location":"user-guide/custom-themes/#global-context","text":"The following variables are available globally on any template.","title":"Global Context"},{"location":"user-guide/custom-themes/#config","text":"The config variable is an instance of MkDocs' config object generated from the mkdocs.yml config file. While you can use any config option, some commonly used options include: config.site_name config.site_url config.site_author config.site_description config.extra_javascript config.extra_css config.repo_url config.repo_name config.copyright config.google_analytics","title":"config"},{"location":"user-guide/custom-themes/#nav","text":"The nav variable is used to create the navigation for the documentation. The nav object is an iterable of navigation objects as defined by the nav configuration setting. In addition to the iterable of navigation objects , the nav object contains the following attributes:","title":"nav"},{"location":"user-guide/custom-themes/#navhomepage","text":"The page object for the homepage of the site.","title":"nav.homepage"},{"location":"user-guide/custom-themes/#navpages","text":"A flat list of all page objects contained in the navigation. This list is not necessarily a complete list of all site pages as it does not contain pages which are not included in the navigation. This list does match the list and order of pages used for all \"next page\" and \"previous page\" links. For a list of all pages, use the pages template variable.","title":"nav.pages"},{"location":"user-guide/custom-themes/#nav-example","text":"Following is a basic usage example which outputs the first and second level navigation as a nested list. {% if nav|length>1 %} <ul> {% for nav_item in nav %} {% if nav_item.children %} <li>{{ nav_item.title }} <ul> {% for nav_item in nav_item.children %} <li class=\"{% if nav_item.active%}current{% endif %}\"> <a href=\"{{ nav_item.url|url }}\">{{ nav_item.title }}</a> </li> {% endfor %} </ul> </li> {% else %} <li class=\"{% if nav_item.active%}current{% endif %}\"> <a href=\"{{ nav_item.url|url }}\">{{ nav_item.title }}</a> </li> {% endif %} {% endfor %} </ul> {% endif %}","title":"Nav Example"},{"location":"user-guide/custom-themes/#base_url","text":"The base_url provides a relative path to the root of the MkDocs project. While this can be used directly by prepending it to a local relative URL, it is best to use the url template filter, which is smarter about how it applies base_url .","title":"base_url"},{"location":"user-guide/custom-themes/#mkdocs_version","text":"Contains the current MkDocs version.","title":"mkdocs_version"},{"location":"user-guide/custom-themes/#build_date_utc","text":"A Python datetime object that represents the date and time the documentation was built in UTC. This is useful for showing how recently the documentation was updated.","title":"build_date_utc"},{"location":"user-guide/custom-themes/#pages","text":"A list of page objects including all pages in the project. The list is a flat list with all pages sorted alphanumerically by directory and file name. Note that index pages sort to the top within a directory. This list can contain pages not included in the global navigation and may not match the order of pages within that navigation.","title":"pages"},{"location":"user-guide/custom-themes/#page","text":"In templates which are not rendered from a Markdown source file, the page variable is None . In templates which are rendered from a Markdown source file, the page variable contains a page object. The same page objects are used as page navigation objects in the global navigation and in the pages template variable. All page objects contain the following attributes:","title":"page"},{"location":"user-guide/custom-themes/#pagetitle","text":"Contains the Title for the current page.","title":"page.title"},{"location":"user-guide/custom-themes/#pagecontent","text":"The rendered Markdown as HTML, this is the contents of the documentation.","title":"page.content"},{"location":"user-guide/custom-themes/#pagetoc","text":"An iterable object representing the Table of contents for a page. Each item in the toc is an AnchorLink which contains the following attributes: AnchorLink.title : The text of the item. AnchorLink.url : The hash fragment of a URL pointing to the item. AnchorLink.level : The zero-based level of the item. AnchorLink.children : An iterable of any child items. The following example would display the top two levels of the Table of Contents for a page. <ul> {% for toc_item in page.toc %} <li><a href=\"{{ toc_item.url }}\">{{ toc_item.title }}</a></li> {% for toc_item in toc_item.children %} <li><a href=\"{{ toc_item.url }}\">{{ toc_item.title }}</a></li> {% endfor %} {% endfor %} </ul>","title":"page.toc"},{"location":"user-guide/custom-themes/#pagemeta","text":"A mapping of the metadata included at the top of the markdown page. In this example we define a source property above the page title. source: generics.py mixins.py # Page title Content... A template can access this metadata for the page with the meta.source variable. This could then be used to link to source files related to the documentation page. {% for filename in page.meta.source %} <a class=\"github\" href=\"https://github.com/.../{{ filename }}\"> <span class=\"label label-info\">{{ filename }}</span> </a> {% endfor %}","title":"page.meta"},{"location":"user-guide/custom-themes/#pageurl","text":"The URL of the page relative to the MkDocs site_dir . It is expected that this be used with the url filter to ensure the URL is relative to the current page. <a href=\"{{ page.url|url }}\">{{ page.title }}</a>","title":"page.url"},{"location":"user-guide/custom-themes/#pageabs_url","text":"The absolute URL of the page from the server root as determined by the value assigned to the site_url configuration setting. The value includes any subdirectory included in the site_url , but not the domain. base_url should not be used with this variable. For example, if site_url: https://example.com/ , then the value of page.abs_url for the page foo.md would be /foo/ . However, if site_url: https://example.com/bar/ , then the value of page.abs_url for the page foo.md would be /bar/foo/ .","title":"page.abs_url"},{"location":"user-guide/custom-themes/#pagecanonical_url","text":"The full, canonical URL to the current page as determined by the value assigned to the site_url configuration setting. The value includes the domain and any subdirectory included in the site_url . base_url should not be used with this variable.","title":"page.canonical_url"},{"location":"user-guide/custom-themes/#pageedit_url","text":"The full URL to the source page in the source repository. Typically used to provide a link to edit the source page. base_url should not be used with this variable.","title":"page.edit_url"},{"location":"user-guide/custom-themes/#pageis_homepage","text":"Evaluates to True for the homepage of the site and False for all other pages. This can be used in conjunction with other attributes of the page object to alter the behavior. For example, to display a different title on the homepage: {% if not page.is_homepage %}{{ page.title }} - {% endif %}{{ site_name }}","title":"page.is_homepage"},{"location":"user-guide/custom-themes/#pageprevious_page","text":"The page object for the previous page or None . The value will be None if the current page is the first item in the site navigation or if the current page is not included in the navigation at all. When the value is a page object, the usage is the same as for page .","title":"page.previous_page"},{"location":"user-guide/custom-themes/#pagenext_page","text":"The page object for the next page or None . The value will be None if the current page is the last item in the site navigation or if the current page is not included in the navigation at all. When the value is a page object, the usage is the same as for page .","title":"page.next_page"},{"location":"user-guide/custom-themes/#pageparent","text":"The immediate parent of the page in the site navigation . None if the page is at the top level.","title":"page.parent"},{"location":"user-guide/custom-themes/#pagechildren","text":"Pages do not contain children and the attribute is always None .","title":"page.children"},{"location":"user-guide/custom-themes/#pageactive","text":"When True , indicates that this page is the currently viewed page. Defaults to False .","title":"page.active"},{"location":"user-guide/custom-themes/#pageis_section","text":"Indicates that the navigation object is a \"section\" object. Always False for page objects.","title":"page.is_section"},{"location":"user-guide/custom-themes/#pageis_page","text":"Indicates that the navigation object is a \"page\" object. Always True for page objects.","title":"page.is_page"},{"location":"user-guide/custom-themes/#pageis_link","text":"Indicates that the navigation object is a \"link\" object. Always False for page objects.","title":"page.is_link"},{"location":"user-guide/custom-themes/#navigation-objects","text":"Navigation objects contained in the nav template variable may be one of section objects, page objects, and link objects. While section objects may contain nested navigation objects, pages and links do not. Page objects are the full page object as used for the current page with all of the same attributes available. Section and Link objects contain a subset of those attributes as defined below:","title":"Navigation Objects"},{"location":"user-guide/custom-themes/#section","text":"A section navigation object defines a named section in the navigation and contains a list of child navigation objects. Note that sections do not contain URLs and are not links of any kind. However, by default, MkDocs sorts index pages to the top and the first child might be used as the URL for a section if a theme choses to do so. The following attributes are available on section objects:","title":"Section"},{"location":"user-guide/custom-themes/#sectiontitle","text":"The title of the section.","title":"section.title"},{"location":"user-guide/custom-themes/#sectionparent","text":"The immediate parent of the section or None if the section is at the top level.","title":"section.parent"},{"location":"user-guide/custom-themes/#sectionchildren","text":"An iterable of all child navigation objects. Children may include nested sections, pages and links.","title":"section.children"},{"location":"user-guide/custom-themes/#sectionactive","text":"When True , indicates that a child page of this section is the current page and can be used to highlight the section as the currently viewed section. Defaults to False .","title":"section.active"},{"location":"user-guide/custom-themes/#sectionis_section","text":"Indicates that the navigation object is a \"section\" object. Always True for section objects.","title":"section.is_section"},{"location":"user-guide/custom-themes/#sectionis_page","text":"Indicates that the navigation object is a \"page\" object. Always False for section objects.","title":"section.is_page"},{"location":"user-guide/custom-themes/#sectionis_link","text":"Indicates that the navigation object is a \"link\" object. Always False for section objects.","title":"section.is_link"},{"location":"user-guide/custom-themes/#link","text":"A link navigation object contains a link which does not point to an internal MkDocs page. The following attributes are available on link objects:","title":"Link"},{"location":"user-guide/custom-themes/#linktitle","text":"The title of the link. This would generally be used as the label of the link.","title":"link.title"},{"location":"user-guide/custom-themes/#linkurl","text":"The URL that the link points to. The URL should always be an absolute URLs and should not need to have base_url prepened.","title":"link.url"},{"location":"user-guide/custom-themes/#linkparent","text":"The immediate parent of the link. None if the link is at the top level.","title":"link.parent"},{"location":"user-guide/custom-themes/#linkchildren","text":"Links do not contain children and the attribute is always None .","title":"link.children"},{"location":"user-guide/custom-themes/#linkactive","text":"External links cannot be \"active\" and the attribute is always False .","title":"link.active"},{"location":"user-guide/custom-themes/#linkis_section","text":"Indicates that the navigation object is a \"section\" object. Always False for link objects.","title":"link.is_section"},{"location":"user-guide/custom-themes/#linkis_page","text":"Indicates that the navigation object is a \"page\" object. Always False for link objects.","title":"link.is_page"},{"location":"user-guide/custom-themes/#linkis_link","text":"Indicates that the navigation object is a \"link\" object. Always True for link objects.","title":"link.is_link"},{"location":"user-guide/custom-themes/#extra-context","text":"Additional variables can be passed to the template with the extra configuration option. This is a set of key value pairs that can make custom templates far more flexible. For example, this could be used to include the project version of all pages and a list of links related to the project. This can be achieved with the following extra configuration: extra: version: 0.13.0 links: - https://github.com/mkdocs - https://docs.readthedocs.org/en/latest/builds.html#mkdocs - https://www.mkdocs.org/ And then displayed with this HTML in the custom theme. {{ config.extra.version }} {% if config.extra.links %} <ul> {% for link in config.extra.links %} <li>{{ link }}</li> {% endfor %} </ul> {% endif %}","title":"Extra Context"},{"location":"user-guide/custom-themes/#template-filters","text":"In addition to Jinja's default filters, the following custom filters are available to use in MkDocs templates:","title":"Template Filters"},{"location":"user-guide/custom-themes/#url","text":"Normalizes a URL. Absolute URLs are passed through unaltered. If the URL is relative and the template context includes a page object, then the URL is returned relative to the page object. Otherwise, the URL is returned with base_url prepended. <a href=\"{{ page.url|url }}\">{{ page.title }}</a>","title":"url"},{"location":"user-guide/custom-themes/#tojson","text":"Safety convert a Python object to a value in a JavaScript script. <script> var mkdocs_page_name = {{ page.title|tojson|safe }}; </script>","title":"tojson"},{"location":"user-guide/custom-themes/#search-and-themes","text":"As of MkDocs version 0.17 client side search support has been added to MkDocs via the search plugin. A theme needs to provide a few things for the plugin to work with the theme. While the search plugin is activated by default, users can disable the plugin and themes should account for this. It is recommended that theme templates wrap search specific markup with a check for the plugin: {% if 'search' in config['plugins'] %} search stuff here... {% endif %} At its most basic functionality, the search plugin will simply provide an index file which is no more than a JSON file containing the content of all pages. The theme would need to implement its own search functionality client-side. However, with a few settings and the necessary templates, the plugin can provide a complete functioning client-side search tool based on lunr.js . The following HTML needs to be added to the theme so that the provided JavaScript is able to properly load the search scripts and make relative links to the search results from the current page. <script>var base_url = '{{ base_url }}';</script> With properly configured settings, the following HTML in a template will add a full search implementation to your theme. <h1 id=\"search\">Search Results</h1> <form action=\"search.html\"> <input name=\"q\" id=\"mkdocs-search-query\" type=\"text\" > </form> <div id=\"mkdocs-search-results\"> Sorry, page not found. </div> The JavaScript in the plugin works by looking for the specific ID's used in the above HTML. The form input for the user to type the search query must be identified with id=\"mkdocs-search-query\" and the div where the results will be placed must be identified with id=\"mkdocs-search-results\" . The plugin supports the following options being set in the theme's configuration file , mkdocs_theme.yml :","title":"Search and themes"},{"location":"user-guide/custom-themes/#include_search_page","text":"Determines whether the search plugin expects the theme to provide a dedicated search page via a template located at search/search.html . When include_search_page is set to true , the search template will be built and available at search/search.html . This method is used by the readthedocs theme. When include_search_page is set to false or not defined, it is expected that the theme provide some other mechanisms for displaying search results. For example, the mkdocs theme displays results on any page via a modal.","title":"include_search_page"},{"location":"user-guide/custom-themes/#search_index_only","text":"Determines whether the search plugin should only generate a search index or a complete search solution. When search_index_only is set to false , then the search plugin modifies the Jinja environment by adding its own templates directory (with a lower precedence than the theme) and adds its scripts to the extra_javascript config setting. When search_index_only is set to true or not defined, the search plugin makes no modifications to the Jinja environment. A complete solution using the provided index file is the responsibility of the theme. The search index is written to a JSON file at search/search_index.json in the site_dir . The JSON object contained within the file may contain up to three objects. { config: {...}, data: [...], index: {...} } If present, the config object contains the key/value pairs of config options defined for the plugin in the user's mkdocs.yml config file under plugings.search . The config object was new in MkDocs version 1.0 . The data object contains a list of document objects. Each document object is made up of a location (URL), a title , and text which can be used to create a search index and/or display search results. If present, the index object contains a pre-built index which offers performance improvements for larger sites. Note that the pre-built index is only created if the user explicitly enables the prebuild_index config option. Themes should expect the index to not be present, but can choose to use the index when it is available. The index object was new in MkDocs version 1.0 .","title":"search_index_only"},{"location":"user-guide/custom-themes/#packaging-themes","text":"MkDocs makes use of Python packaging to distribute themes. This comes with a few requirements. To see an example of a package containing one theme, see the MkDocs Bootstrap theme and to see a package that contains many themes, see the MkDocs Bootswatch theme . !!! Note It is not strictly necessary to package a theme, as the entire theme can be contained in the `custom_dir`. If you have created a \"one-off theme,\" that should be sufficient. However, if you intend to distribute your theme for others to use, packaging the theme has some advantages. By packaging your theme, your users can more easily install it and they can then take advantage of the [custom_dir] to make tweaks to your theme to better suit their needs.","title":"Packaging Themes"},{"location":"user-guide/custom-themes/#package-layout","text":"The following layout is recommended for themes. Two files at the top level directory called MANIFEST.in and setup.py beside the theme directory which contains an empty __init__.py file, a theme configuration file ( mkdocs-theme.yml ), and your template and media files. . |-- MANIFEST.in |-- theme_name | |-- __init__.py | |-- mkdocs-theme.yml | |-- main.html | |-- styles.css `-- setup.py The MANIFEST.in file should contain the following contents but with theme_name updated and any extra file extensions added to the include. recursive-include theme_name *.ico *.js *.css *.png *.html *.eot *.svg *.ttf *.woff recursive-exclude * __pycache__ recursive-exclude * *.py[co] The setup.py should include the following text with the modifications described below. from setuptools import setup, find_packages VERSION = '0.0.1' setup( name=\"mkdocs-themename\", version=VERSION, url='', license='', description='', author='', author_email='', packages=find_packages(), include_package_data=True, entry_points={ 'mkdocs.themes': [ 'themename = theme_name', ] }, zip_safe=False ) Fill in the URL, license, description, author and author email address. The name should follow the convention mkdocs-themename (like mkdocs- bootstrap and mkdocs-bootswatch ), starting with MkDocs, using hyphens to separate words and including the name of your theme. Most of the rest of the file can be left unedited. The last section we need to change is the entry_points. This is how MkDocs finds the theme(s) you are including in the package. The name on the left is the one that users will use in their mkdocs.yml and the one on the right is the directory containing your theme files. The directory you created at the start of this section with the main.html file should contain all of the other theme files. The minimum requirement is that it includes a main.html for the theme. It must also include a __init__.py file which should be empty, this file tells Python that the directory is a package.","title":"Package Layout"},{"location":"user-guide/custom-themes/#theme-configuration","text":"A packaged theme is required to include a configuration file named mkdocs_theme.yml which is placed in the root of your template files. The file should contain default configuration options for the theme. However, if the theme offers no configuration options, the file is still required and can be left blank. The theme author is free to define any arbitrary options deemed necessary and those options will be made available in the templates to control behavior. For example, a theme might want to make a sidebar optional and include the following in the mkdocs_theme.yml file: show_sidebar: true Then in a template, that config option could be referenced: {% if config.theme.show_sidebar %} <div id=\"sidebar\">...</div> {% endif %} And the user could override the default in their project's mkdocs.yml config file: theme: name: themename show_sidebar: false In addition to arbitrary options defined by the theme, MkDocs defines a few special options which alters its behavior: !!! block \"\" #### static_templates This option mirrors the [theme] config option of the same name and allows some defaults to be set by the theme. Note that while the user can add templates to this list, the user cannot remove templates included in the theme's config. #### extends Defines a parent theme that this theme inherits from. The value should be the string name of the parent theme. Normal Jinja inheritance rules apply. Plugins may also define some options which allow the theme to inform a plugin about which set of plugin options it expects. See the documentation for any plugins you may wish to support in your theme.","title":"Theme Configuration"},{"location":"user-guide/custom-themes/#distributing-themes","text":"With the above changes, your theme should now be ready to install. This can be done with pip, using pip install . if you are still in the same directory as the setup.py. Most Python packages, including MkDocs, are distributed on PyPI. To do this, you should run the following command. python setup.py register If you don't have an account setup, you should be prompted to create one. For a much more detailed guide, see the official Python packaging documentation for Packaging and Distributing Projects .","title":"Distributing Themes"},{"location":"user-guide/deploying-your-docs/","text":"D. Modul Konsorsium Terkadang beberapa institusi/library/repository memiliki keseragaman, misalnya yang berkaitan dengan kesehatan, pendidikan, atau berdasarkan lokasi geografis tertentu. 1. Menambahkan Institusi ke Konsorsium Modul konsorsium bermaksud membuat grup berdasarkan kesepakatan, misalnya konsorsium Muhammadiyah. Untuk membentuk konsorsium beberapa institusi dengan jumlah minimal tertentu mengajukan permohonan resmi untuk membentuk konsorsium. Selanjutnya Admin perpusnas akan membuat sub-domain konsorsium. sub-domain, misalnya: Konsorsium Muhammadiyah . Menu home berisi pemberi kontribusi terbanyak dari konsorsium tersebut.","title":"D. Modul Situs Konsorsium"},{"location":"user-guide/deploying-your-docs/#d-modul-konsorsium","text":"Terkadang beberapa institusi/library/repository memiliki keseragaman, misalnya yang berkaitan dengan kesehatan, pendidikan, atau berdasarkan lokasi geografis tertentu.","title":"D. Modul Konsorsium"},{"location":"user-guide/deploying-your-docs/#1-menambahkan-institusi-ke-konsorsium","text":"Modul konsorsium bermaksud membuat grup berdasarkan kesepakatan, misalnya konsorsium Muhammadiyah. Untuk membentuk konsorsium beberapa institusi dengan jumlah minimal tertentu mengajukan permohonan resmi untuk membentuk konsorsium. Selanjutnya Admin perpusnas akan membuat sub-domain konsorsium. sub-domain, misalnya: Konsorsium Muhammadiyah . Menu home berisi pemberi kontribusi terbanyak dari konsorsium tersebut.","title":"1. Menambahkan Institusi ke Konsorsium"},{"location":"user-guide/plugins/","text":"Plugins A Guide to installing, using and creating MkDocs Plugins Installing Plugins Before a plugin can be used, it must be installed on the system. If you are using a plugin which comes with MkDocs, then it was installed when you installed MkDocs. However, to install third party plugins, you need to determine the appropriate package name and install it using pip : pip install mkdocs-foo-plugin Once a plugin has been successfully installed, it is ready to use. It just needs to be enabled in the configuration file. Using Plugins The plugins configuration option should contain a list of plugins to use when building the site. Each \"plugin\" must be a string name assigned to the plugin (see the documentation for a given plugin to determine its \"name\"). A plugin listed here must already be installed . plugins: - search Some plugins may provide configuration options of their own. If you would like to set any configuration options, then you can nest a key/value mapping ( option_name: option value ) of any options that a given plugin supports. Note that a colon ( : ) must follow the plugin name and then on a new line the option name and value must be indented and separated by a colon. If you would like to define multiple options for a single plugin, each option must be defined on a separate line. plugins: - search: lang: en foo: bar For information regarding the configuration options available for a given plugin, see that plugin's documentation. For a list of default plugins and how to override them, see the configuration documentation. Developing Plugins Like MkDocs, plugins must be written in Python. It is generally expected that each plugin would be distributed as a separate Python module, although it is possible to define multiple plugins in the same module. At a minimum, a MkDocs Plugin must consist of a BasePlugin subclass and an entry point which points to it. BasePlugin A subclass of mkdocs.plugins.BasePlugin should define the behavior of the plugin. The class generally consists of actions to perform on specific events in the build process as well as a configuration scheme for the plugin. All BasePlugin subclasses contain the following attributes: config_scheme : A tuple of configuration validation instances. Each item must consist of a two item tuple in which the first item is the string name of the configuration option and the second item is an instance of mkdocs.config.config_options.BaseConfigOption or any of its subclasses. For example, the following `config_scheme` defines three configuration options: `foo`, which accepts a string; `bar`, which accepts an integer; and `baz`, which accepts a boolean value. class MyPlugin(mkdocs.plugins.BasePlugin): config_scheme = ( ('foo', mkdocs.config.config_options.Type(mkdocs.utils.string_types, default='a default value')), ('bar', mkdocs.config.config_options.Type(int, default=0)), ('baz', mkdocs.config.config_options.Type(bool, default=True)) ) When the user's configuration is loaded, the above scheme will be used to validate the configuration and fill in any defaults for settings not provided by the user. The validation classes may be any of the classes provided in `mkdocs.config.config_options` or a third party subclass defined in the plugin. Any settings provided by the user which fail validation or are not defined in the `config_scheme` will raise a `mkdocs.config.base.ValidationError`. config : A dictionary of configuration options for the plugin, which is populated by the load_config method after configuration validation has completed. Use this attribute to access options provided by the user. def on_pre_build(self, config): if self.config['bool_option']: # implement \"bool_option\" functionality here... All BasePlugin subclasses contain the following method(s): load_config(options) : Loads configuration from a dictionary of options. Returns a tuple of (errors, warnings) . This method is called by MkDocs during configuration validation and should not need to be called by the plugin. on_<event_name>() : Optional methods which define the behavior for specific events . The plugin should define its behavior within these methods. Replace <event_name> with the actual name of the event. For example, the pre_build event would be defined in the on_pre_build method. Most events accept one positional argument and various keyword arguments. It is generally expected that the positional argument would be modified (or replaced) by the plugin and returned. If nothing is returned (the method returns `None`), then the original, unmodified object is used. The keyword arguments are simply provided to give context and/or supply data which may be used to determine how the positional argument should be modified. It is good practice to accept keyword arguments as `**kwargs`. In the event that additional keywords are provided to an event in a future version of MkDocs, there will be no need to alter your plugin. For example, the following event would add an additional static_template to the theme config: class MyPlugin(BasePlugin): def on_config(self, config, **kwargs): config['theme'].static_templates.add('my_template.html') return config Events There are three kinds of events: Global Events , Page Events and Template Events . Global Events Global events are called once per build at either the beginning or end of the build process. Any changes made in these events will have a global effect on the entire site. on_serve : The serve event is only called when the serve command is used during development. It is passed the Server instance which can be modified before it is activated. For example, additional files or directories could be added to the list of \"watched\" files for auto-reloading. Parameters: : __server:__ `livereload.Server` instance : __config:__ global configuration object Returns: : `livereload.Server` instance on_config : The config event is the first event called on build and is run immediately after the user configuration is loaded and validated. Any alterations to the config should be made here. Parameters: : __config:__ global configuration object Returns: : global configuration object on_pre_build : The pre_build event does not alter any variables. Use this event to call pre-build scripts. Parameters: : __config:__ global configuration object on_files : The files event is called after the files collection is populated from the docs_dir . Use this event to add, remove, or alter files in the collection. Note that Page objects have not yet been associated with the file objects in the collection. Use Page Events to manipulate page specific data. Parameters: : __files:__ global files collection : __config:__ global configuration object Returns: : global files collection on_nav : The nav event is called after the site navigation is created and can be used to alter the site navigation. Parameters: : __nav:__ global navigation object : __config:__ global configuration object : __files:__ global files collection Returns: : global navigation object on_env : The env event is called after the Jinja template environment is created and can be used to alter the Jinja environment. Parameters: : __env:__ global Jinja environment : __config:__ global configuration object : __site_navigation:__ global navigation object Returns: : global Jinja Environment on_post_build : The post_build event does not alter any variables. Use this event to call post-build scripts. Parameters: : __config:__ global configuration object Template Events Template events are called once for each non-page template. Each template event will be called for each template defined in the extra_templates config setting as well as any static_templates defined in the theme. All template events are called after the env event and before any page events . on_pre_template : The pre_template event is called immediately after the subject template is loaded and can be used to alter the content of the template. Parameters: : __template__: the template contents as string : __template_name__: string filename of template : __config:__ global configuration object Returns: : template contents as string on_template_context : The template_context event is called immediately after the context is created for the subject template and can be used to alter the context for that specific template only. Parameters: : __context__: dict of template context variables : __template_name__: string filename of template : __config:__ global configuration object Returns: : dict of template context variables on_post_template : The post_template event is called after the template is rendered, but before it is written to disc and can be used to alter the output of the template. If an empty string is returned, the template is skipped and nothing is is written to disc. Parameters: : __output_content__: output of rendered template as string : __template_name__: string filename of template : __config:__ global configuration object Returns: : output of rendered template as string Page Events Page events are called once for each Markdown page included in the site. All page events are called after the post_template event and before the post_build event. on_pre_page : The pre_page event is called before any actions are taken on the subject page and can be used to alter the Page instance. Parameters: : __page:__ `mkdocs.nav.Page` instance : __config:__ global configuration object : __site_navigation:__ global navigation object Returns: : `mkdocs.nav.Page` instance on_page_read_source : The on_page_read_source event can replace the default mechanism to read the contents of a page's source from the filesystem. Parameters: : __page:__ `mkdocs.nav.Page` instance : __config:__ global configuration object Returns: : The raw source for a page as unicode string. If `None` is returned, the default loading from a file will be performed. on_page_markdown : The page_markdown event is called after the page's markdown is loaded from file and can be used to alter the Markdown source text. The meta- data has been stripped off and is available as page.meta at this point. Parameters: : __markdown:__ Markdown source text of page as string : __page:__ `mkdocs.nav.Page` instance : __config:__ global configuration object : __site_navigation:__ global navigation object Returns: : Markdown source text of page as string on_page_content : The page_content event is called after the Markdown text is rendered to HTML (but before being passed to a template) and can be used to alter the HTML body of the page. Parameters: : __html:__ HTML rendered from Markdown source as string : __page:__ `mkdocs.nav.Page` instance : __config:__ global configuration object : __site_navigation:__ global navigation object Returns: : HTML rendered from Markdown source as string on_page_context : The page_context event is called after the context for a page is created and can be used to alter the context for that specific page only. Parameters: : __context__: dict of template context variables : __page:__ `mkdocs.nav.Page` instance : __config:__ global configuration object : __site_navigation:__ global navigation object Returns: : dict of template context variables on_post_page : The post_template event is called after the template is rendered, but before it is written to disc and can be used to alter the output of the page. If an empty string is returned, the page is skipped and nothing is written to disc. Parameters: : __output_content:__ output of rendered template as string : __page:__ `mkdocs.nav.Page` instance : __config:__ global configuration object : __site_navigation:__ global navigation object Returns: : output of rendered template as string Entry Point Plugins need to be packaged as Python libraries (distributed on PyPI separate from MkDocs) and each must register as a Plugin via a setuptools entry_point. Add the following to your setup.py script: entry_points={ 'mkdocs.plugins': [ 'pluginname = path.to.some_plugin:SomePluginClass', ] } The pluginname would be the name used by users (in the config file) and path.to.some_plugin:SomePluginClass would be the importable plugin itself ( from path.to.some_plugin import SomePluginClass ) where SomePluginClass is a subclass of BasePlugin which defines the plugin behavior. Naturally, multiple Plugin classes could exist in the same module. Simply define each as a separate entry_point. entry_points={ 'mkdocs.plugins': [ 'featureA = path.to.my_plugins:PluginA', 'featureB = path.to.my_plugins:PluginB' ] } Note that registering a plugin does not activate it. The user still needs to tell MkDocs to use if via the config.","title":"Plugins"},{"location":"user-guide/plugins/#plugins","text":"A Guide to installing, using and creating MkDocs Plugins","title":"Plugins"},{"location":"user-guide/plugins/#installing-plugins","text":"Before a plugin can be used, it must be installed on the system. If you are using a plugin which comes with MkDocs, then it was installed when you installed MkDocs. However, to install third party plugins, you need to determine the appropriate package name and install it using pip : pip install mkdocs-foo-plugin Once a plugin has been successfully installed, it is ready to use. It just needs to be enabled in the configuration file.","title":"Installing Plugins"},{"location":"user-guide/plugins/#using-plugins","text":"The plugins configuration option should contain a list of plugins to use when building the site. Each \"plugin\" must be a string name assigned to the plugin (see the documentation for a given plugin to determine its \"name\"). A plugin listed here must already be installed . plugins: - search Some plugins may provide configuration options of their own. If you would like to set any configuration options, then you can nest a key/value mapping ( option_name: option value ) of any options that a given plugin supports. Note that a colon ( : ) must follow the plugin name and then on a new line the option name and value must be indented and separated by a colon. If you would like to define multiple options for a single plugin, each option must be defined on a separate line. plugins: - search: lang: en foo: bar For information regarding the configuration options available for a given plugin, see that plugin's documentation. For a list of default plugins and how to override them, see the configuration documentation.","title":"Using Plugins"},{"location":"user-guide/plugins/#developing-plugins","text":"Like MkDocs, plugins must be written in Python. It is generally expected that each plugin would be distributed as a separate Python module, although it is possible to define multiple plugins in the same module. At a minimum, a MkDocs Plugin must consist of a BasePlugin subclass and an entry point which points to it.","title":"Developing Plugins"},{"location":"user-guide/plugins/#baseplugin","text":"A subclass of mkdocs.plugins.BasePlugin should define the behavior of the plugin. The class generally consists of actions to perform on specific events in the build process as well as a configuration scheme for the plugin. All BasePlugin subclasses contain the following attributes:","title":"BasePlugin"},{"location":"user-guide/plugins/#config_scheme","text":": A tuple of configuration validation instances. Each item must consist of a two item tuple in which the first item is the string name of the configuration option and the second item is an instance of mkdocs.config.config_options.BaseConfigOption or any of its subclasses. For example, the following `config_scheme` defines three configuration options: `foo`, which accepts a string; `bar`, which accepts an integer; and `baz`, which accepts a boolean value. class MyPlugin(mkdocs.plugins.BasePlugin): config_scheme = ( ('foo', mkdocs.config.config_options.Type(mkdocs.utils.string_types, default='a default value')), ('bar', mkdocs.config.config_options.Type(int, default=0)), ('baz', mkdocs.config.config_options.Type(bool, default=True)) ) When the user's configuration is loaded, the above scheme will be used to validate the configuration and fill in any defaults for settings not provided by the user. The validation classes may be any of the classes provided in `mkdocs.config.config_options` or a third party subclass defined in the plugin. Any settings provided by the user which fail validation or are not defined in the `config_scheme` will raise a `mkdocs.config.base.ValidationError`.","title":"config_scheme"},{"location":"user-guide/plugins/#config","text":": A dictionary of configuration options for the plugin, which is populated by the load_config method after configuration validation has completed. Use this attribute to access options provided by the user. def on_pre_build(self, config): if self.config['bool_option']: # implement \"bool_option\" functionality here... All BasePlugin subclasses contain the following method(s):","title":"config"},{"location":"user-guide/plugins/#load_configoptions","text":": Loads configuration from a dictionary of options. Returns a tuple of (errors, warnings) . This method is called by MkDocs during configuration validation and should not need to be called by the plugin.","title":"load_config(options)"},{"location":"user-guide/plugins/#on_event_name","text":": Optional methods which define the behavior for specific events . The plugin should define its behavior within these methods. Replace <event_name> with the actual name of the event. For example, the pre_build event would be defined in the on_pre_build method. Most events accept one positional argument and various keyword arguments. It is generally expected that the positional argument would be modified (or replaced) by the plugin and returned. If nothing is returned (the method returns `None`), then the original, unmodified object is used. The keyword arguments are simply provided to give context and/or supply data which may be used to determine how the positional argument should be modified. It is good practice to accept keyword arguments as `**kwargs`. In the event that additional keywords are provided to an event in a future version of MkDocs, there will be no need to alter your plugin. For example, the following event would add an additional static_template to the theme config: class MyPlugin(BasePlugin): def on_config(self, config, **kwargs): config['theme'].static_templates.add('my_template.html') return config","title":"on_&lt;event_name&gt;()"},{"location":"user-guide/plugins/#events","text":"There are three kinds of events: Global Events , Page Events and Template Events .","title":"Events"},{"location":"user-guide/plugins/#global-events","text":"Global events are called once per build at either the beginning or end of the build process. Any changes made in these events will have a global effect on the entire site.","title":"Global Events"},{"location":"user-guide/plugins/#on_serve","text":": The serve event is only called when the serve command is used during development. It is passed the Server instance which can be modified before it is activated. For example, additional files or directories could be added to the list of \"watched\" files for auto-reloading. Parameters: : __server:__ `livereload.Server` instance : __config:__ global configuration object Returns: : `livereload.Server` instance","title":"on_serve"},{"location":"user-guide/plugins/#on_config","text":": The config event is the first event called on build and is run immediately after the user configuration is loaded and validated. Any alterations to the config should be made here. Parameters: : __config:__ global configuration object Returns: : global configuration object","title":"on_config"},{"location":"user-guide/plugins/#on_pre_build","text":": The pre_build event does not alter any variables. Use this event to call pre-build scripts. Parameters: : __config:__ global configuration object","title":"on_pre_build"},{"location":"user-guide/plugins/#on_files","text":": The files event is called after the files collection is populated from the docs_dir . Use this event to add, remove, or alter files in the collection. Note that Page objects have not yet been associated with the file objects in the collection. Use Page Events to manipulate page specific data. Parameters: : __files:__ global files collection : __config:__ global configuration object Returns: : global files collection","title":"on_files"},{"location":"user-guide/plugins/#on_nav","text":": The nav event is called after the site navigation is created and can be used to alter the site navigation. Parameters: : __nav:__ global navigation object : __config:__ global configuration object : __files:__ global files collection Returns: : global navigation object","title":"on_nav"},{"location":"user-guide/plugins/#on_env","text":": The env event is called after the Jinja template environment is created and can be used to alter the Jinja environment. Parameters: : __env:__ global Jinja environment : __config:__ global configuration object : __site_navigation:__ global navigation object Returns: : global Jinja Environment","title":"on_env"},{"location":"user-guide/plugins/#on_post_build","text":": The post_build event does not alter any variables. Use this event to call post-build scripts. Parameters: : __config:__ global configuration object","title":"on_post_build"},{"location":"user-guide/plugins/#template-events","text":"Template events are called once for each non-page template. Each template event will be called for each template defined in the extra_templates config setting as well as any static_templates defined in the theme. All template events are called after the env event and before any page events .","title":"Template Events"},{"location":"user-guide/plugins/#on_pre_template","text":": The pre_template event is called immediately after the subject template is loaded and can be used to alter the content of the template. Parameters: : __template__: the template contents as string : __template_name__: string filename of template : __config:__ global configuration object Returns: : template contents as string","title":"on_pre_template"},{"location":"user-guide/plugins/#on_template_context","text":": The template_context event is called immediately after the context is created for the subject template and can be used to alter the context for that specific template only. Parameters: : __context__: dict of template context variables : __template_name__: string filename of template : __config:__ global configuration object Returns: : dict of template context variables","title":"on_template_context"},{"location":"user-guide/plugins/#on_post_template","text":": The post_template event is called after the template is rendered, but before it is written to disc and can be used to alter the output of the template. If an empty string is returned, the template is skipped and nothing is is written to disc. Parameters: : __output_content__: output of rendered template as string : __template_name__: string filename of template : __config:__ global configuration object Returns: : output of rendered template as string","title":"on_post_template"},{"location":"user-guide/plugins/#page-events","text":"Page events are called once for each Markdown page included in the site. All page events are called after the post_template event and before the post_build event.","title":"Page Events"},{"location":"user-guide/plugins/#on_pre_page","text":": The pre_page event is called before any actions are taken on the subject page and can be used to alter the Page instance. Parameters: : __page:__ `mkdocs.nav.Page` instance : __config:__ global configuration object : __site_navigation:__ global navigation object Returns: : `mkdocs.nav.Page` instance","title":"on_pre_page"},{"location":"user-guide/plugins/#on_page_read_source","text":": The on_page_read_source event can replace the default mechanism to read the contents of a page's source from the filesystem. Parameters: : __page:__ `mkdocs.nav.Page` instance : __config:__ global configuration object Returns: : The raw source for a page as unicode string. If `None` is returned, the default loading from a file will be performed.","title":"on_page_read_source"},{"location":"user-guide/plugins/#on_page_markdown","text":": The page_markdown event is called after the page's markdown is loaded from file and can be used to alter the Markdown source text. The meta- data has been stripped off and is available as page.meta at this point. Parameters: : __markdown:__ Markdown source text of page as string : __page:__ `mkdocs.nav.Page` instance : __config:__ global configuration object : __site_navigation:__ global navigation object Returns: : Markdown source text of page as string","title":"on_page_markdown"},{"location":"user-guide/plugins/#on_page_content","text":": The page_content event is called after the Markdown text is rendered to HTML (but before being passed to a template) and can be used to alter the HTML body of the page. Parameters: : __html:__ HTML rendered from Markdown source as string : __page:__ `mkdocs.nav.Page` instance : __config:__ global configuration object : __site_navigation:__ global navigation object Returns: : HTML rendered from Markdown source as string","title":"on_page_content"},{"location":"user-guide/plugins/#on_page_context","text":": The page_context event is called after the context for a page is created and can be used to alter the context for that specific page only. Parameters: : __context__: dict of template context variables : __page:__ `mkdocs.nav.Page` instance : __config:__ global configuration object : __site_navigation:__ global navigation object Returns: : dict of template context variables","title":"on_page_context"},{"location":"user-guide/plugins/#on_post_page","text":": The post_template event is called after the template is rendered, but before it is written to disc and can be used to alter the output of the page. If an empty string is returned, the page is skipped and nothing is written to disc. Parameters: : __output_content:__ output of rendered template as string : __page:__ `mkdocs.nav.Page` instance : __config:__ global configuration object : __site_navigation:__ global navigation object Returns: : output of rendered template as string","title":"on_post_page"},{"location":"user-guide/plugins/#entry-point","text":"Plugins need to be packaged as Python libraries (distributed on PyPI separate from MkDocs) and each must register as a Plugin via a setuptools entry_point. Add the following to your setup.py script: entry_points={ 'mkdocs.plugins': [ 'pluginname = path.to.some_plugin:SomePluginClass', ] } The pluginname would be the name used by users (in the config file) and path.to.some_plugin:SomePluginClass would be the importable plugin itself ( from path.to.some_plugin import SomePluginClass ) where SomePluginClass is a subclass of BasePlugin which defines the plugin behavior. Naturally, multiple Plugin classes could exist in the same module. Simply define each as a separate entry_point. entry_points={ 'mkdocs.plugins': [ 'featureA = path.to.my_plugins:PluginA', 'featureB = path.to.my_plugins:PluginB' ] } Note that registering a plugin does not activate it. The user still needs to tell MkDocs to use if via the config.","title":"Entry Point"},{"location":"user-guide/styling-your-docs/","text":"B. Modul Institusi Modul ini berisi cara mendaftarkan Institusi , Library , dan Repository . Hanya institusi di wilayah Republik Indonesia yang diperbolehkan. 1. Menambah dan Mengatur Institusi Untuk menambah dan Mengatur Institusi anda perlu Login terlebih dahulu. Tekan Organisasi Mitra dilanjutkan dengan menekan Daftarkan Institusi Anda . Perhatikan informasi alur pendaftaran . Pastikan apakah institusi Anda sudah terdaftar atau tidak. Jika belum terdaftar, Anda dapat mendaftarkan institusi Anda. Pastikan jenis institusi Anda sesuai dengan aturan Perpusnas. Selanjutnya mengisi form institusi. 2. Menambah dan Mengatur Perpustakaan Untuk Menambah Perpustakaan Anda harus memiliki institusi terlebih dahulu. Masuk ke Institusi Anda lewat kolom pencarian, kemudian tekan +tambah perpustakaan . Lanjutkan dengan mengisi informasi perpustakaan Anda. 3. Menambah dan Mengatur Repository Untuk Menambah Repository Anda harus masuk terlebih dahulu ke Institusi dan your Library . Cari perpustakaan tempat bernaung repository melalui kolom pencarian. Jika sudah ditemukan, tekan + Add Repository . Pastikan repository belum didaftarkan. Isi Repository Form dengan benar, terutama di bagian Home URL, Cover URL dan OAI Base URL agar harvesting berjalan dengan sempurna. Bagian Repository Group harap Tidak Diisi , karena akan diisi oleh ADMIN perpusnas atau ADMIN konsorsium. 4. Mengatur Widget Cari library Anda, dan tekan Widget. Selanjutnya Anda akan memperoleh Code widget yang dapat Anda tempelkan di library Anda sebagai informasi bahwa Library Anda sudah terindeks OneSearch. User selesai sampai tahap ini, dilanjutkan oleh proses verifikasi dan harvesting oleh admin perpusnas. Widget juga untuk Institusi dan Perpustakaan . Widget sebagai bukti bahwa Institusi, Perpustakaan, dan Repository Anda sudah terindeks pada Indonesia One Search (IOS)","title":"B. Modul Institusi"},{"location":"user-guide/styling-your-docs/#b-modul-institusi","text":"Modul ini berisi cara mendaftarkan Institusi , Library , dan Repository . Hanya institusi di wilayah Republik Indonesia yang diperbolehkan.","title":"B. Modul Institusi"},{"location":"user-guide/styling-your-docs/#1-menambah-dan-mengatur-institusi","text":"Untuk menambah dan Mengatur Institusi anda perlu Login terlebih dahulu. Tekan Organisasi Mitra dilanjutkan dengan menekan Daftarkan Institusi Anda . Perhatikan informasi alur pendaftaran . Pastikan apakah institusi Anda sudah terdaftar atau tidak. Jika belum terdaftar, Anda dapat mendaftarkan institusi Anda. Pastikan jenis institusi Anda sesuai dengan aturan Perpusnas. Selanjutnya mengisi form institusi.","title":"1. Menambah dan Mengatur Institusi"},{"location":"user-guide/styling-your-docs/#2-menambah-dan-mengatur-perpustakaan","text":"Untuk Menambah Perpustakaan Anda harus memiliki institusi terlebih dahulu. Masuk ke Institusi Anda lewat kolom pencarian, kemudian tekan +tambah perpustakaan . Lanjutkan dengan mengisi informasi perpustakaan Anda.","title":"2. Menambah dan Mengatur Perpustakaan"},{"location":"user-guide/styling-your-docs/#3-menambah-dan-mengatur-repository","text":"Untuk Menambah Repository Anda harus masuk terlebih dahulu ke Institusi dan your Library . Cari perpustakaan tempat bernaung repository melalui kolom pencarian. Jika sudah ditemukan, tekan + Add Repository . Pastikan repository belum didaftarkan. Isi Repository Form dengan benar, terutama di bagian Home URL, Cover URL dan OAI Base URL agar harvesting berjalan dengan sempurna. Bagian Repository Group harap Tidak Diisi , karena akan diisi oleh ADMIN perpusnas atau ADMIN konsorsium.","title":"3. Menambah dan Mengatur Repository"},{"location":"user-guide/styling-your-docs/#4-mengatur-widget","text":"Cari library Anda, dan tekan Widget. Selanjutnya Anda akan memperoleh Code widget yang dapat Anda tempelkan di library Anda sebagai informasi bahwa Library Anda sudah terindeks OneSearch. User selesai sampai tahap ini, dilanjutkan oleh proses verifikasi dan harvesting oleh admin perpusnas. Widget juga untuk Institusi dan Perpustakaan . Widget sebagai bukti bahwa Institusi, Perpustakaan, dan Repository Anda sudah terindeks pada Indonesia One Search (IOS)","title":"4. Mengatur Widget"},{"location":"user-guide/writing-your-docs/","text":"A. Modul User Pada dasarnya untuk mencari artikel (collection) dapat dilakukan tanpa login. Hanya saja, untuk mendaftarkan institusi,library, atau repositori, perlu registrasi. Selain itu history pencarian juga tersimpan ketika user terdaftar. 1. Login Untuk Login , masuk ke menu Masuk lalu isi Username dan Password 2. Registrasi Untuk Registrasi , tekan menu Masuk lalu tekan Buat Akun Baru .Isi First Name , Last Name , Email Address , Desired Username, dan Passwrod serta mengetik Password Again . 3. Password Recovery Jika lupa password, perlu recovery password . Langkahnya adalah tekan Lupa Password dilanjutkan dengan mengisi Akun dan Email . Tekan Pulihkan Akun untuk mereset pasword.","title":"A. Modul User"},{"location":"user-guide/writing-your-docs/#a-modul-user","text":"Pada dasarnya untuk mencari artikel (collection) dapat dilakukan tanpa login. Hanya saja, untuk mendaftarkan institusi,library, atau repositori, perlu registrasi. Selain itu history pencarian juga tersimpan ketika user terdaftar.","title":"A. Modul User"},{"location":"user-guide/writing-your-docs/#1-login","text":"Untuk Login , masuk ke menu Masuk lalu isi Username dan Password","title":"1. Login"},{"location":"user-guide/writing-your-docs/#2-registrasi","text":"Untuk Registrasi , tekan menu Masuk lalu tekan Buat Akun Baru .Isi First Name , Last Name , Email Address , Desired Username, dan Passwrod serta mengetik Password Again .","title":"2. Registrasi"},{"location":"user-guide/writing-your-docs/#3-password-recovery","text":"Jika lupa password, perlu recovery password . Langkahnya adalah tekan Lupa Password dilanjutkan dengan mengisi Akun dan Email . Tekan Pulihkan Akun untuk mereset pasword.","title":"3. Password Recovery"}]}